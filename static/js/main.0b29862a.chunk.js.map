{"version":3,"sources":["SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchMods","year","mod","url","concat","console","log","get","then","response","setState","state","value","autocomplete","selectedMod","data","ModuleCode","error","props","updateResult","updateHistory","catch","undefined","handleSubmit","event","preventDefault","handleChange","target","toUpperCase","modcodes","modules","map","results","filter","RegExp","test","slice","handleClick","sem","addMod","selectSem","selectYear","generateYears","n","Array","from","val","i","renderYears","react_default","a","createElement","Fragment","key","componentDidMount","componentDidUpdate","prevProps","_this2","onSubmit","type","name","onChange","placeholder","id","onClick","buildPreReqTree","style","color","module","Component","App","filterObjProps","blacklist","obj","temp","JSON","parse","stringify","prop","convertObj","constructor","elem","keys","makePlan","delMod","mcs","getCurrMods","currmods","yourmods","first","second","modMavenTree","indexOf","isMod","replace","result","buildTree","mmTree","Promise","all","boolOp","treeArray","ParsedPrerequisite","getPrereqs","boolTree","Only","Prerequisite Tree","preReqTree","parseBoolTree","or","reduce","acc","and","checkPreclusion","ParsedPreclusion","checkPrereqs","checkDuplicates","currmod","length","Sem 1","Sem 2","ModuleCredit","newMcs","parseInt","history","Preclusions","Prerequisites","Needed by","LockedModules","className","SearchBar_SearchBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b29862a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst axios = require(\"axios\");\n\nexport default class SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      sem: \"1\",\n      year: \"2018-2019\",\n      modules: [], // stores all modules\n      autocomplete: [],\n      selectedMod: \"\", // stored as module code\n      error: \"\"\n    };\n  }\n\n  searchMods = (year, mod) => {\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n    console.log(url);\n    axios\n      .get(url)\n      .then(response => {\n        this.setState(state => ({\n          value: mod,\n          year: year,\n          autocomplete: [],\n          selectedMod: response.data.ModuleCode,\n          error: \"\" // make any existing error message disappear\n        }));\n        this.props.updateResult(response.data);\n        this.props.updateHistory(mod);\n      })\n      .catch(error => {\n        // handle error\n        console.log(error);\n        this.setState({\n          error: \"Could not find module\"\n        });\n        this.props.updateResult(undefined);\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    // who does the search?\n    this.searchMods(this.state.year, this.state.value);\n  };\n\n  handleChange = event => {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results =\n      value === \"\"\n        ? []\n        : modcodes.filter(mod => RegExp(value + \"+\").test(mod)).slice(0, 10);\n    this.setState({\n      value: value,\n      autocomplete: results\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.selectedMod == null) {\n      this.setState({ error: \"No mod selected\" });\n      return undefined;\n    }\n    const year = this.state.year;\n    const sem = \"Sem \" + this.state.sem;\n    const mod = this.state.selectedMod;\n\n    this.props.addMod(mod, sem, year);\n  };\n\n  selectSem = event => {\n    this.setState({ sem: event.target.value });\n  };\n\n  selectYear = event => {\n    this.setState({ year: event.target.value });\n    axios\n      .get(`https://api.nusmods.com/${event.target.value}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  generateYears = n => {\n    return Array.from(new Array(n), (val, i) => 2000 + i);\n  };\n\n  renderYears = () => (\n    <React.Fragment>\n      {this.generateYears(20).map(year => (\n        <option key={year}>{year + \"-\" + (year + 1)}</option>\n      ))}\n    </React.Fragment>\n  );\n\n  componentDidMount = () => {\n    axios\n      .get(`https://api.nusmods.com/${this.state.year}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (prevProps.mod !== this.props.mod) {\n      this.searchMods(this.state.year, this.props.mod);\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        Module Code:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          placeholder={\"Search modules\"}\n        />\n        <input type=\"submit\" value=\"Search\" />\n        <button id=\"add-mod\" onClick={this.handleClick}>\n          Add Module\n        </button>\n        <br />\n        {this.state.selectedMod !== undefined ? (\n          <button id=\"build-tree\" onClick={() => this.props.buildPreReqTree(this.state.year)}>\n            Build Tree\n          </button>\n        ) : (\n          \"\"\n        )}\n        <br />\n        Semester:\n        <select id=\"select-sem\" onClick={this.selectSem}>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n        </select>\n        Year:\n        <select id=\"select-year\" onClick={this.selectYear}>\n          {this.renderYears()}\n        </select>\n        <br />\n        <span style={{ color: \"red\" }}>{this.state.error}</span>\n        {this.state.autocomplete.map(module => (\n          <p\n            key={module}\n            onClick={() => this.searchMods(this.state.year, module)}\n          >\n            {module}\n          </p>\n        ))}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  addMod: PropTypes.func.isRequired,\n  buildPreReqTree: PropTypes.func.isRequired,\n  updateResult: PropTypes.func.isRequired,\n  updateHistory: PropTypes.func.isRequired,\n  year: PropTypes.string,\n  mod: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchBar.js\";\nimport SearchBar from \"./SearchBar.js\";\nconst axios = require(\"axios\");\n\n// TODO\n// Check for prereqs, preclusion, mcs(overloading), basic requirements, mod mapping\n// Other programmes besides mods eg SEP, UTCP\n// Sort schedule chronologically\n// Some bugs in the ParsedPrerequisite Tree: Should be \"or\" but instead it's \"and\" eg: MA1521, MA1102R\n// Overload indicator\n// Keyboard shortcuts\n// Test for dead links\n// Build entire prereq tree from top down\n// Tags and sharing\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mod: \"\",\n      result: undefined, // state of search result\n      preReqTree: {}, // contains preReqTree obj\n      history: [], // contains history of searched modules\n      yourmods: {}, // contains scheduled modules\n      mcs: 0\n    };\n  }\n\n  // Gets rid of unwanted object properties\n  filterObjProps = (blacklist, obj) => {\n    if (typeof obj === \"object\") {\n      // Makes a copy of the object and modifies it\n      const temp = JSON.parse(JSON.stringify(obj));\n      blacklist.map(prop => delete temp[prop]);\n      return temp;\n    } else {\n      return obj;\n    }\n  };\n\n  // Converts object to html\n  convertObj = obj => {\n    if (typeof obj !== \"object\") {\n      return obj;\n    } else if (obj.constructor === Array) {\n      return obj.map(elem => {\n        return this.convertObj(elem);\n      });\n    } else {\n      return Object.keys(obj).map(key => (\n        <table key={key}>\n          <tbody>\n            <tr>\n              <td>{key}</td>\n              <td>{this.convertObj(obj[key])}</td>\n            </tr>\n          </tbody>\n        </table>\n      ));\n    }\n  };\n\n  // Converts a plan object into html\n  makePlan = (obj, props) => {\n    if (obj.constructor === Array) {\n      return obj.map(elem => (\n        <tr>\n          <td>\n            <button\n              onClick={() =>\n                this.delMod(elem.name, elem.mcs, props[1], props[0])\n              }\n            >\n              {elem.name}\n            </button>\n          </td>\n        </tr>\n      ));\n    } else {\n      return Object.keys(obj).map(key => (\n        <tr>\n          <td>{key}</td>\n          <td>{this.makePlan(obj[key], props.concat([key]))}</td>\n        </tr>\n      ));\n    }\n  };\n\n  getCurrMods = () => {\n    var currmods = [];\n    for (var year in this.state.yourmods) {\n      const first = this.state.yourmods[year][\"Sem 1\"].map(mod => mod.name);\n      const second = this.state.yourmods[year][\"Sem 2\"].map(mod => mod.name);\n      currmods = currmods.concat(first.concat(second));\n    }\n    return currmods;\n  };\n\n  searchMods = mod => {\n    this.setState({\n      mod: mod\n    });\n  };\n\n  // Parses boolTree objs to return a html tree\n  modMavenTree = obj => {\n    if (typeof obj !== \"object\") {\n      return (\n        <button key={obj} onClick={() => this.searchMods(obj)}>\n          {obj}\n        </button>\n      );\n    } else if (obj.constructor === Array) {\n      return obj.map(mod => this.modMavenTree(mod));\n    } else {\n      const isMod = key =>\n        [\n          \"Prerequisite Tree\",\n          \"Either of\",\n          \"All of\",\n          \"Preclusions\",\n          \"Prerequisites\",\n          \"Needed by\",\n          \"Only\"\n        ].indexOf(key) === -1;\n      const replace = key =>\n        key === \"or\" ? (\n          \"Any of\"\n        ) : key === \"and\" ? (\n          \"All of\"\n        ) : isMod(key) ? (\n          <button key={key} onClick={() => this.searchMods(key)}>\n            {key}\n          </button>\n        ) : (\n          key\n        );\n      return Object.keys(obj).map(key => (\n        <table key={key}>\n          <tbody>\n            <tr>\n              <td>{replace(key)}</td>\n              <td>{this.modMavenTree(obj[key])}</td>\n            </tr>\n          </tbody>\n        </table>\n      ));\n    }\n  };\n\n  // Builds entire prereq tree and updates state\n  buildPreReqTree = year => {\n    const mod = this.state.result.ModuleCode;\n    const getPrereqs = mod => {\n      if (mod === undefined) {\n        return undefined;\n      }\n\n      const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n      return axios\n        .get(url)\n        .then(response => response.data.ParsedPrerequisite)\n        .catch(error => {\n          console.log(error);\n          return undefined;\n        });\n    };\n\n    const buildTree = mmTree => {\n      if (typeof mmTree === \"object\") {\n        // If mmTree is a boolTree\n        return Promise.all(\n          Object.keys(mmTree).map(boolOp =>\n            Promise.all(mmTree[boolOp].map(buildTree)).then(treeArray => {\n              // treeArray is an array of promises containing mmTrees\n              mmTree[boolOp] = treeArray;\n            })\n          )\n        ).then(result => {\n          return mmTree;\n        });\n      } else {\n        // If mmTree is a single mod\n        // Returns an object of format {<mod>: <boolTree>}\n        return getPrereqs(mmTree).then(boolTree => {\n          // Iterates on bool operator keys \"or\" and \"and\"\n          if (boolTree !== undefined) {\n            if (typeof boolTree === \"object\") {\n              return Promise.all(\n                Object.keys(boolTree).map(boolOp =>\n                  // boolTree[boolOp] is an array of prerequisite mods\n                  Promise.all(boolTree[boolOp].map(buildTree)).then(\n                    treeArray => {\n                      // treeArray is an array of promises containing mmTrees\n                      boolTree[boolOp] = treeArray;\n                    }\n                  )\n                )\n              ).then(result => {\n                // result is irrelevant - an array of undefineds\n                const temp = {};\n                temp[mmTree] = boolTree;\n                return temp;\n              });\n            } else {\n              // If there is only one prerequisite\n              return buildTree(boolTree).then(result => {\n                const temp = {};\n                temp[mmTree] = { Only: result };\n                return temp;\n              });\n            }\n          } else {\n            // If mod has no prerequisites (Either mod does not exist or it is a foundational mod)\n            return mmTree;\n          }\n        });\n      }\n    };\n\n    buildTree(mod).then(result => {\n      const temp = { \"Prerequisite Tree\": result };\n      console.log(\"Prerequisite Tree\");\n      console.log(temp);\n      this.setState({\n        preReqTree: temp\n      });\n    });\n  };\n\n  // Parses boolTree objs to return a bool value(prerequisites, preclusions)\n  parseBoolTree = (obj, currmods) => {\n    if (typeof obj !== \"object\") {\n      return currmods.indexOf(obj) >= 0;\n    } else {\n      // console.log(obj);\n      const or =\n        obj.or == null\n          ? true\n          : obj.or.reduce(\n              (acc, elem) => acc || this.parseBoolTree(elem, currmods),\n              false\n            );\n      const and =\n        obj.and == null\n          ? true\n          : obj.and.reduce(\n              (acc, elem) => acc && this.parseBoolTree(elem, currmods),\n              true\n            );\n      // console.log(or, and);\n      return or && and;\n    }\n  };\n\n  checkPreclusion = currmods => {\n    if (\n      this.state.result === undefined ||\n      this.state.result.ParsedPreclusion === undefined\n    )\n      return false;\n    else\n      return this.parseBoolTree(this.state.result.ParsedPreclusion, currmods);\n  };\n\n  checkPrereqs = currmods => {\n    // console.log(this.state.result);\n    if (\n      this.state.result === undefined ||\n      this.state.result.ParsedPrerequisite === undefined\n    )\n      return true;\n    else\n      return this.parseBoolTree(this.state.result.ParsedPrerequisite, currmods);\n  };\n\n  checkDuplicates = (mod, currmods) => {\n    return currmods.filter(currmod => currmod === mod).length > 0;\n  };\n\n  addMod = (mod, sem, year) => {\n    const currmods = this.getCurrMods();\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    // console.log(\"test0\");\n    // Checks for terminating conditions\n    if (this.checkDuplicates(mod, currmods)) {\n      this.setState({ error: \"No duplicates\" });\n      // console.log(\"test1\");\n      return undefined;\n    } else if (this.checkPreclusion(currmods)) {\n      this.setState({ error: \"Already precluded\" });\n      // console.log(\"test2\");\n      return undefined;\n    } else if (!this.checkPrereqs(currmods)) {\n      this.setState({ error: \"Lack prerequisites\" });\n      // console.log(\"test3\");\n      return undefined;\n    }\n\n    // console.log(\"test\");\n    if (this.state.result !== undefined) {\n      if (temp[year] === undefined) {\n        temp[year] = { \"Sem 1\": [], \"Sem 2\": [] };\n      }\n      temp[year][sem] = temp[year][sem].concat([\n        { name: mod, mcs: this.state.result.ModuleCredit }\n      ]);\n    }\n\n    // Updates yourmods, mcs, and clears error\n    const newMcs =\n      this.state.result === undefined\n        ? 0\n        : parseInt(this.state.result.ModuleCredit);\n    // console.log(temp, newMcs);\n    this.setState(state => ({\n      yourmods: temp,\n      mcs: state.mcs + newMcs,\n      error: \"\"\n    }));\n  };\n\n  delMod = (mod, mcs, sem, year) => {\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    temp[year][sem] = temp[year][sem].filter(elem => elem.name !== mod);\n    this.setState((state, props) => ({\n      yourmods: temp,\n      mcs: state.mcs - mcs\n    }));\n  };\n\n  updateResult = result => {\n    this.setState(state => ({\n      result: result\n    }));\n  };\n\n  updateHistory = mod => {\n    this.setState(state => ({\n      history: state.history.concat([mod]).slice(-10)\n    }));\n  };\n\n  // PLEASE DELETE\n  // componentDidUpdate = () => {\n  // console.log(this.state);\n  // };\n\n  render() {\n    const unwantedProps = [\n      \"LockedModules\",\n      \"ParsedPreclusion\",\n      \"ParsedPrerequisite\",\n      \"ModmavenTree\",\n      \"History\",\n      \"Timetable\",\n      \"LecturePeriods\",\n      \"TutorialPeriods\",\n      \"CorsBiddingStats\",\n      \"Workload\"\n    ];\n    const mmTree =\n      this.state.result !== undefined\n        ? {\n            Preclusions: this.state.result.ParsedPreclusion,\n            Prerequisites: this.state.result.ParsedPrerequisite,\n            \"Needed by\": this.state.result.LockedModules\n          }\n        : \"\";\n    return (\n      <div className=\"App\">\n        <div>\n          Your Mods:\n          {this.makePlan(this.state.yourmods, [])} <br />\n          Your MCs: {this.state.mcs}\n          <br />\n        </div>\n        <div>\n          <SearchBar\n            addMod={this.addMod}\n            buildPreReqTree={this.buildPreReqTree}\n            updateResult={this.updateResult}\n            updateHistory={this.updateHistory}\n            year={this.state.year}\n            mod={this.state.mod}\n          />\n          {this.convertObj(\n            this.filterObjProps(unwantedProps, this.state.result)\n          )}\n          {this.modMavenTree(mmTree)}\n          {this.modMavenTree(this.state.preReqTree)}\n        </div>\n        <div>\n          History:\n          {this.state.history.map(result => (\n            <p key={result} onClick={() => this.searchMods(result)}>\n              {result}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}