{"version":3,"sources":["SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchMods","year","mod","url","concat","console","log","get","then","response","setState","state","value","autocomplete","selectedMod","data","ModuleCode","props","updateError","updateResult","updateHistory","catch","error","handleSubmit","event","preventDefault","handleChange","target","toUpperCase","modcodes","modules","map","results","filter","RegExp","test","slice","handleClick","sem","addMod","selectSem","selectYear","generateYears","n","parseInt","Date","toISOString","Array","from","val","i","renderYears","react_default","a","createElement","Fragment","key","renderOverloadCheckbox","overload","type","onChange","updateOverload","checked","componentDidMount","componentDidUpdate","prevProps","_this2","onSubmit","name","placeholder","id","onClick","style","color","module","Component","App","filterObjProps","blacklist","obj","temp","JSON","parse","stringify","prop","makeButton","click","text","formatYear","replace","buildTreeButton","buildPreReqTree","result","AcadYear","makeTable","fn","convertObj","constructor","elem","keys","makePlan","delMod","mcs","sort","b","modMavenTree","undefined","indexOf","isMod","buildTree","node","Promise","all","boolOp","treeArray","ParsedPrerequisite","getPrereqs","boolTree","defineProperty","Only","Prerequisite Tree","preReqTree","getCurrMods","arguments","length","maxYear","yourmods","first","second","reduce","acc","arr","parseBoolTree","currmods","or","and","checkOverload","total","find","currmod","ParsedPreclusion","checkPreclusion","checkPrereqs","yearInt","Sem 1","Sem 2","ModuleCredit","newMcs","history","handleKeyInput","mmTree","Preclusions","Prerequisites","Needed by","LockedModules","className","onKeyDown","SearchBar_SearchBar","index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0c2a324.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst axios = require(\"axios\");\n\nexport default class SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      sem: \"1\",\n      year: \"2018-2019\",\n      modules: [], // stores all modules\n      autocomplete: [],\n      selectedMod: \"\" // stored as module code\n    };\n  }\n\n  searchMods = (year, mod) => {\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n    console.log(url);\n    axios\n      .get(url)\n      .then(response => {\n        this.setState(state => ({\n          value: mod,\n          year: year,\n          autocomplete: [],\n          selectedMod: response.data.ModuleCode\n        }));\n        this.props.updateError(\"\"); // Clears error field\n        this.props.updateResult(response.data);\n        this.props.updateHistory(mod);\n      })\n      .catch(error => {\n        console.log(error);\n        this.props.updateError(\"Could not find module\");\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.searchMods(this.state.year, this.state.value);\n  };\n\n  handleChange = event => {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results =\n      value === \"\"\n        ? []\n        : modcodes.filter(mod => RegExp(value + \"+\").test(mod)).slice(0, 10);\n    this.setState({\n      value: value,\n      autocomplete: results\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.selectedMod == null) {\n      this.props.updateError(\"No mod selected\");\n      return undefined;\n    }\n    const year = this.state.year;\n    const sem = \"Sem \" + this.state.sem;\n    const mod = this.state.selectedMod;\n\n    this.props.addMod(mod, sem, year);\n  };\n\n  selectSem = event => {\n    this.setState({ sem: event.target.value });\n  };\n\n  selectYear = event => {\n    this.setState({ year: event.target.value });\n    axios\n      .get(`https://api.nusmods.com/${event.target.value}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  generateYears = n => {\n    // Gets current year - 4\n    const year = parseInt(new Date().toISOString().slice(0, 4)) - 4;\n    return Array.from(new Array(n), (val, i) => year + i);\n  };\n\n  renderYears = () => (\n    <React.Fragment>\n      {this.generateYears(10).map(year => (\n        <option key={year}>{year + \"-\" + (year + 1)}</option>\n      ))}\n    </React.Fragment>\n  );\n\n  renderOverloadCheckbox = () => (\n    <React.Fragment>\n      {this.props.overload ? (\n        <input type=\"checkbox\" onChange={this.props.updateOverload} checked />\n      ) : (\n        <input type=\"checkbox\" onChange={this.props.updateOverload} />\n      )}\n    </React.Fragment>\n  );\n\n  componentDidMount = () => {\n    axios\n      .get(`https://api.nusmods.com/${this.state.year}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (prevProps.mod !== this.props.mod) {\n      this.searchMods(this.state.year, this.props.mod);\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        Module Code:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          placeholder={\"Search modules\"}\n        />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" id=\"add-mod\" onClick={this.handleClick}>\n          Add Module\n        </button>\n        <br />\n        Semester:\n        <select id=\"select-sem\" onClick={this.selectSem}>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n        </select>\n        Year:\n        <select id=\"select-year\" onClick={this.selectYear}>\n          {this.renderYears()}\n        </select>\n        <br />\n        Overload: {this.renderOverloadCheckbox()}\n        <br />\n        <span style={{ color: \"red\" }}>{this.props.error}</span>\n        {this.state.autocomplete.map(module => (\n          <p\n            key={module}\n            onClick={() => this.searchMods(this.state.year, module)}\n          >\n            {module}\n          </p>\n        ))}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  addMod: PropTypes.func.isRequired,\n  updateResult: PropTypes.func.isRequired,\n  updateHistory: PropTypes.func.isRequired,\n  updateError: PropTypes.func.isRequired,\n  updateOverload: PropTypes.func.isRequired,\n  year: PropTypes.string,\n  mod: PropTypes.string,\n  overload: PropTypes.bool,\n  error: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchBar.js\";\nimport SearchBar from \"./SearchBar.js\";\nconst axios = require(\"axios\");\n\n// DONE\n// Added condition that prereqs have to be chronological in addMod()\n// Display years chronologically in makePlan()\n// Added overflow functionality in addMod(), added checkbox in SearchBar component\n// Autoupdating of years in generateYears()\n\n// TODO\n// Check for basic requirements, mod mapping\n// Other programmes besides mods eg SEP, UTCP\n// Some bugs in the ParsedPrerequisite Tree: Should be \"or\" but instead it's \"and\" eg: MA1521, MA1102R\n// Bug: Mods that are not explicitly stated as prereqs but are preclusions do not function as prereqs\n// Keyboard shortcuts\n// Tags and sharing\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mod: \"\",\n      result: undefined, // state of search result\n      preReqTree: {}, // contains preReqTree obj\n      history: [], // contains history of searched modules\n      yourmods: {}, // contains scheduled modules\n      mcs: 0,\n      overload: false,\n      error: \"\"\n    };\n  }\n\n  // Gets rid of unwanted object properties\n  filterObjProps = (blacklist, obj) => {\n    if (typeof obj === \"object\") {\n      // Makes a copy of the object and modifies it\n      const temp = JSON.parse(JSON.stringify(obj));\n      blacklist.map(prop => delete temp[prop]);\n      return temp;\n    } else {\n      return obj;\n    }\n  };\n\n  makeButton = (key, click, text) => (\n    <button key={key} onClick={click}>\n      {text}\n    </button>\n  );\n\n  formatYear = year => {\n    return year.replace(\"/\", \"-\");\n  };\n\n  buildTreeButton = key => {\n    if (key === \"Prerequisites\")\n      return (\n        <React.Fragment>\n          <br />\n          {this.makeButton(\n            key,\n            () =>\n              this.buildPreReqTree(this.formatYear(this.state.result.AcadYear)),\n            \"Prerequisite Tree\"\n          )}\n        </React.Fragment>\n      );\n  };\n\n  makeTable = (key, fn) => (\n    <table key={key}>\n      <tbody>\n        <tr>\n          <td>\n            {key}\n            {this.buildTreeButton(key)}\n          </td>\n          <td>{fn}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n\n  // Converts object to html\n  convertObj = obj => {\n    if (typeof obj !== \"object\") {\n      return obj;\n    } else if (obj.constructor === Array) {\n      return obj.map(elem => {\n        return this.convertObj(elem);\n      });\n    } else {\n      return Object.keys(obj).map(key =>\n        this.makeTable(key, this.convertObj(obj[key]))\n      );\n    }\n  };\n\n  // Converts a plan object into html\n  makePlan = (obj, props) => {\n    if (obj.constructor === Array) {\n      return obj.map(elem =>\n        this.makeButton(\n          elem.name,\n          () => this.delMod(elem.name, elem.mcs, props[1], props[0]),\n          elem.name\n        )\n      );\n    } else {\n      // Sorts years(keys) in chronological/lexical order before rendering\n      return Object.keys(obj)\n        .sort((a, b) => a <= b)\n        .map(key =>\n          this.makeTable(key, this.makePlan(obj[key], props.concat([key])))\n        );\n    }\n  };\n\n  searchMods = mod => {\n    this.setState({\n      mod: mod\n    });\n  };\n\n  // Parses boolTree objs to return a html tree\n  modMavenTree = obj => {\n    if (obj === undefined || obj === \"\") {\n      return;\n    }\n    if (typeof obj !== \"object\") {\n      return this.makeButton(obj, () => this.searchMods(obj), obj);\n    }\n    if (obj.constructor === Array) {\n      return obj.map(mod => this.modMavenTree(mod));\n    }\n    const isMod = key =>\n      [\n        \"Prerequisite Tree\",\n        \"Either of\",\n        \"All of\",\n        \"Preclusions\",\n        \"Prerequisites\",\n        \"Needed by\",\n        \"Only\"\n      ].indexOf(key) === -1;\n    const replace = key => {\n      if (key === \"or\") return \"Any of\";\n      if (key === \"and\") return \"All of\";\n      if (isMod(key))\n        return this.makeButton(key, () => this.searchMods(key), key);\n      return key;\n    };\n    return Object.keys(obj).map(key =>\n      this.makeTable(replace(key), this.modMavenTree(obj[key]))\n    );\n  };\n\n  // Builds entire prereq tree and updates state\n  buildPreReqTree = year => {\n    if (this.state.result === undefined) return;\n    const mod = this.state.result.ModuleCode;\n    const getPrereqs = mod => {\n      if (mod === undefined) {\n        return undefined;\n      }\n\n      const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n      return axios\n        .get(url)\n        .then(response => response.data.ParsedPrerequisite)\n        .catch(error => {\n          console.log(error);\n          return undefined;\n        });\n    };\n\n    const buildTree = node => {\n      if (typeof node === \"object\") {\n        // If node is a boolTree\n        return Promise.all(\n          Object.keys(node).map(boolOp =>\n            buildTree(node[boolOp]).then(treeArray => {\n              // An array of preReqTrees\n              node[boolOp] = treeArray;\n            })\n          )\n        ).then(result => node);\n      } else if (node.constructor === Array) {\n        // If node is an array of mods\n        return Promise.all(node.map(buildTree));\n      } else {\n        // If node is a single mod\n        return getPrereqs(node).then(boolTree => {\n          if (boolTree === undefined) {\n            // If mod has no prerequisites (Either mod does not exist or it is a foundational mod)\n            return node;\n          } else {\n            if (typeof boolTree === \"object\") {\n              return buildTree(boolTree).then(result => ({ [node]: result }));\n            } else {\n              // If there is only one prerequisite\n              return buildTree(boolTree).then(result => ({\n                [node]: { Only: result }\n              }));\n            }\n          }\n        });\n      }\n    };\n\n    buildTree(mod).then(result => {\n      const temp = { \"Prerequisite Tree\": result };\n      this.setState({\n        preReqTree: temp\n      });\n    });\n  };\n\n  addMod = (mod, sem, year) => {\n    const getCurrMods = (sem = \"Sem 2\", maxYear = \"9999-9999\") => {\n      const getModsInYear = year => {\n        if (year < maxYear || (year === maxYear && sem === \"Sem 2\")) {\n          const first = this.state.yourmods[year][\"Sem 1\"].map(mod => mod.name);\n          const second = this.state.yourmods[year][\"Sem 2\"].map(\n            mod => mod.name\n          );\n          return first.concat(second);\n        } else if (year === maxYear && sem === \"Sem 1\") {\n          return this.state.yourmods[year][\"Sem 1\"].map(mod => mod.name);\n        } else {\n          return [];\n        }\n      };\n\n      const currmods = Object.keys(this.state.yourmods)\n        .map(getModsInYear)\n        .reduce((acc, arr) => acc.concat(arr), []);\n\n      return currmods;\n    };\n\n    // Parses boolTree objs to return a bool value(prerequisites, preclusions)\n    const parseBoolTree = (obj, currmods) => {\n      if (typeof obj !== \"object\") {\n        return currmods.indexOf(obj) >= 0;\n      } else {\n        const or =\n          obj.or == null\n            ? true\n            : obj.or.reduce(\n                (acc, elem) => acc || parseBoolTree(elem, currmods),\n                false\n              );\n        const and =\n          obj.and == null\n            ? true\n            : obj.and.reduce(\n                (acc, elem) => acc && parseBoolTree(elem, currmods),\n                true\n              );\n        return or && and;\n      }\n    };\n\n    const checkPreclusion = currmods => {\n      if (\n        this.state.result === undefined ||\n        this.state.result.ParsedPreclusion === undefined\n      )\n        return false;\n      else return parseBoolTree(this.state.result.ParsedPreclusion, currmods);\n    };\n\n    const checkPrereqs = currmods => {\n      if (\n        this.state.result === undefined ||\n        this.state.result.ParsedPrerequisite === undefined\n      )\n        return true;\n      else return parseBoolTree(this.state.result.ParsedPrerequisite, currmods);\n    };\n\n    const checkDuplicates = currmods => {\n      return currmods.find(currmod => currmod === mod) !== undefined;\n    };\n\n    const checkOverload = () => {\n      if (this.state.yourmods[year] === undefined) {\n        return 0;\n      } else {\n        const mild = 24;\n        const overload = 32;\n        const total = this.state.yourmods[year][sem]\n          .map(mod => parseInt(mod.mcs))\n          .reduce((acc, mcs) => acc + mcs, 0);\n        return total >= overload ? 2 : total >= mild ? 1 : 0;\n      }\n    };\n\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    if (checkDuplicates(getCurrMods())) {\n      this.updateError(\"No duplicates\");\n      return undefined;\n    } else if (checkPreclusion(getCurrMods())) {\n      this.updateError(\"Already precluded\");\n      return undefined;\n    } else if (!checkPrereqs(getCurrMods(sem, year))) {\n      this.updateError(\"Lack prerequisites\");\n      return undefined;\n    } else if (checkOverload() > 0) {\n      const value = checkOverload();\n      // Overflows mod\n      if (value === 2 && !this.state.overload) {\n        this.updateError(\n          \"You are unable to overload without applying for permission\"\n        );\n        // Increments year, sem\n        const yearInt = parseInt(year.slice(0, 4));\n        year = sem === \"Sem 1\" ? year : yearInt + 1 + \"-\" + (yearInt + 2);\n        sem = sem === \"Sem 1\" ? \"Sem 2\" : \"Sem 1\";\n      } else if (value === 1) {\n        this.updateError(\"Taking on a challenge are we?\");\n      }\n    }\n\n    if (this.state.result !== undefined) {\n      if (temp[year] === undefined) {\n        temp[year] = { \"Sem 1\": [], \"Sem 2\": [] };\n      }\n      temp[year][sem] = temp[year][sem].concat([\n        { name: mod, mcs: this.state.result.ModuleCredit }\n      ]);\n    }\n\n    // Updates yourmods, mcs\n    // Clears error?s\n    const newMcs =\n      this.state.result === undefined\n        ? 0\n        : parseInt(this.state.result.ModuleCredit);\n    this.setState(state => ({\n      yourmods: temp,\n      mcs: state.mcs + newMcs\n      // error: \"\"\n    }));\n  };\n\n  delMod = (mod, mcs, sem, year) => {\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    temp[year][sem] = temp[year][sem].filter(elem => elem.name !== mod);\n    this.setState((state, props) => ({\n      yourmods: temp,\n      mcs: state.mcs - mcs\n    }));\n  };\n\n  updateResult = result => {\n    this.setState(state => ({\n      result: result\n    }));\n  };\n\n  updateHistory = mod => {\n    this.setState(state => ({\n      history: [mod].concat(state.history).slice(0, 10)\n    }));\n  };\n\n  updateOverload = () => {\n    this.setState(state => ({\n      overload: !state.overload\n    }));\n  };\n\n  updateError = error => {\n    this.setState({ error: error });\n  };\n\n  handleKeyInput = event => {\n    console.log(event.key);\n  };\n\n  render() {\n    const unwantedProps = [\n      \"LockedModules\",\n      \"ParsedPreclusion\",\n      \"ParsedPrerequisite\",\n      \"ModmavenTree\",\n      \"History\",\n      \"Timetable\",\n      \"LecturePeriods\",\n      \"TutorialPeriods\",\n      \"CorsBiddingStats\",\n      \"Workload\"\n    ];\n    const mmTree =\n      this.state.result !== undefined\n        ? {\n            Preclusions: this.state.result.ParsedPreclusion,\n            Prerequisites: this.state.result.ParsedPrerequisite,\n            \"Needed by\": this.state.result.LockedModules\n          }\n        : \"\";\n    return (\n      <div className=\"App\" onKeyDown={this.handleKeyInput}>\n        <div>\n          Your Mods:\n          {this.makePlan(this.state.yourmods, [])} <br />\n          Your MCs: {this.state.mcs}\n          <br />\n        </div>\n        <div>\n          <SearchBar\n            addMod={this.addMod}\n            updateResult={this.updateResult}\n            updateHistory={this.updateHistory}\n            updateError={this.updateError}\n            updateOverload={this.updateOverload}\n            year={this.state.year}\n            mod={this.state.mod}\n            overload={this.state.overload}\n            error={this.state.error}\n          />\n          {this.convertObj(\n            this.filterObjProps(unwantedProps, this.state.result)\n          )}\n          {this.modMavenTree(mmTree)}\n          {this.modMavenTree(this.state.preReqTree)}\n        </div>\n        <div>\n          History:\n          {this.state.history.map((result, index) => (\n            <p key={index} onClick={() => this.searchMods(result)}>\n              {result}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}