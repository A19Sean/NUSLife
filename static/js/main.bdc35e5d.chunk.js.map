{"version":3,"sources":["SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchMods","year","mod","url","concat","console","log","get","then","response","setState","state","value","autocomplete","selectedMod","data","ModuleCode","props","updateError","updateResult","updateHistory","catch","error","handleSubmit","event","preventDefault","handleChange","target","toUpperCase","modcodes","modules","map","results","filter","RegExp","test","slice","handleClick","sem","addMod","selectSem","selectYear","generateYears","n","Array","from","val","i","renderYears","react_default","a","createElement","Fragment","key","componentDidMount","componentDidUpdate","prevProps","_this2","onSubmit","type","name","onChange","placeholder","id","onClick","undefined","buildPreReqTree","style","color","module","Component","App","filterObjProps","blacklist","obj","temp","JSON","parse","stringify","prop","convertObj","constructor","elem","keys","makePlan","delMod","mcs","getCurrMods","currmods","yourmods","first","second","modMavenTree","indexOf","isMod","replace","result","buildTree","node","Promise","all","boolOp","treeArray","ParsedPrerequisite","getPrereqs","boolTree","defineProperty","Only","Prerequisite Tree","preReqTree","parseBoolTree","or","reduce","acc","and","checkPreclusion","ParsedPreclusion","checkPrereqs","checkDuplicates","currmod","length","Sem 1","Sem 2","ModuleCredit","newMcs","parseInt","history","mmTree","Preclusions","Prerequisites","Needed by","LockedModules","className","SearchBar_SearchBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdc35e5d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst axios = require(\"axios\");\n\nexport default class SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      sem: \"1\",\n      year: \"2018-2019\",\n      modules: [], // stores all modules\n      autocomplete: [],\n      selectedMod: \"\" // stored as module code\n    };\n  }\n\n  searchMods = (year, mod) => {\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n    console.log(url);\n    axios\n      .get(url)\n      .then(response => {\n        this.setState(state => ({\n          value: mod,\n          year: year,\n          autocomplete: [],\n          selectedMod: response.data.ModuleCode  \n        }));\n        this.props.updateError(\"\"); // make any existing error message disappear\n        this.props.updateResult(response.data);\n        this.props.updateHistory(mod);\n      })\n      .catch(error => {\n        // handle error\n        console.log(error);\n        this.props.updateError(\"Could not find module\");\n        // this.props.updateResult(undefined);\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    // who does the search? search button\n    this.searchMods(this.state.year, this.state.value);\n  };\n\n  handleChange = event => {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results =\n      value === \"\"\n        ? []\n        : modcodes.filter(mod => RegExp(value + \"+\").test(mod)).slice(0, 10);\n    this.setState({\n      value: value,\n      autocomplete: results\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.selectedMod == null) {\n      this.props.updateError(\"No mod selected\");\n      return undefined;\n    }\n    const year = this.state.year;\n    const sem = \"Sem \" + this.state.sem;\n    const mod = this.state.selectedMod;\n\n    this.props.addMod(mod, sem, year);\n  };\n\n  selectSem = event => {\n    this.setState({ sem: event.target.value });\n  };\n\n  selectYear = event => {\n    this.setState({ year: event.target.value });\n    axios\n      .get(`https://api.nusmods.com/${event.target.value}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  generateYears = n => {\n    return Array.from(new Array(n), (val, i) => 2000 + i);\n  };\n\n  renderYears = () => (\n    <React.Fragment>\n      {this.generateYears(20).map(year => (\n        <option key={year}>{year + \"-\" + (year + 1)}</option>\n      ))}\n    </React.Fragment>\n  );\n\n  componentDidMount = () => {\n    axios\n      .get(`https://api.nusmods.com/${this.state.year}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (prevProps.mod !== this.props.mod) {\n      this.searchMods(this.state.year, this.props.mod);\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        Module Code:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          placeholder={\"Search modules\"}\n        />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" id=\"add-mod\" onClick={this.handleClick}>\n          Add Module\n        </button>\n        <br />\n        {this.state.selectedMod !== undefined ? (\n          <button id=\"build-tree\" onClick={() => this.props.buildPreReqTree(this.state.year)}>\n            Build Tree\n          </button>\n        ) : (\n          \"\"\n        )}\n        <br />\n        Semester:\n        <select id=\"select-sem\" onClick={this.selectSem}>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n        </select>\n        Year:\n        <select id=\"select-year\" onClick={this.selectYear}>\n          {this.renderYears()}\n        </select>\n        <br />\n        <span style={{ color: \"red\" }}>{this.props.error}</span>\n        {this.state.autocomplete.map(module => (\n          <p\n            key={module}\n            onClick={() => this.searchMods(this.state.year, module)}\n          >\n            {module}\n          </p>\n        ))}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  addMod: PropTypes.func.isRequired,\n  buildPreReqTree: PropTypes.func.isRequired,\n  updateResult: PropTypes.func.isRequired,\n  updateHistory: PropTypes.func.isRequired,\n  updateError: PropTypes.func.isRequired,\n  year: PropTypes.string,\n  mod: PropTypes.string,\n  error: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchBar.js\";\nimport SearchBar from \"./SearchBar.js\";\nconst axios = require(\"axios\");\n\n// TODO\n// Bug: this.state.history is not limited to the latest 10 searches as long as it has a \"key\" property - remove key={result} and there is no issue\n// Check for mcs(overloading), basic requirements, mod mapping\n// Other programmes besides mods eg SEP, UTCP\n// Sort schedule chronologically\n// Some bugs in the ParsedPrerequisite Tree: Should be \"or\" but instead it's \"and\" eg: MA1521, MA1102R\n// Overload indicator\n// Keyboard shortcuts\n// Test for dead links\n// Tags and sharing\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mod: \"\",\n      result: undefined, // state of search result\n      preReqTree: {}, // contains preReqTree obj\n      history: [], // contains history of searched modules\n      yourmods: {}, // contains scheduled modules\n      mcs: 0,\n      error: \"\"\n    };\n  }\n\n  // Gets rid of unwanted object properties\n  filterObjProps = (blacklist, obj) => {\n    if (typeof obj === \"object\") {\n      // Makes a copy of the object and modifies it\n      const temp = JSON.parse(JSON.stringify(obj));\n      blacklist.map(prop => delete temp[prop]);\n      return temp;\n    } else {\n      return obj;\n    }\n  };\n\n  // Converts object to html\n  convertObj = obj => {\n    if (typeof obj !== \"object\") {\n      return obj;\n    } else if (obj.constructor === Array) {\n      return obj.map(elem => {\n        return this.convertObj(elem);\n      });\n    } else {\n      return Object.keys(obj).map(key => (\n        <table key={key}>\n          <tbody>\n            <tr>\n              <td>{key}</td>\n              <td>{this.convertObj(obj[key])}</td>\n            </tr>\n          </tbody>\n        </table>\n      ));\n    }\n  };\n\n  // Converts a plan object into html\n  makePlan = (obj, props) => {\n    if (obj.constructor === Array) {\n      return obj.map(elem => (\n        <tr>\n          <td>\n            <button\n              onClick={() =>\n                this.delMod(elem.name, elem.mcs, props[1], props[0])\n              }\n            >\n              {elem.name}\n            </button>\n          </td>\n        </tr>\n      ));\n    } else {\n      return Object.keys(obj).map(key => (\n        <tr>\n          <td>{key}</td>\n          <td>{this.makePlan(obj[key], props.concat([key]))}</td>\n        </tr>\n      ));\n    }\n  };\n\n  getCurrMods = () => {\n    var currmods = [];\n    for (var year in this.state.yourmods) {\n      const first = this.state.yourmods[year][\"Sem 1\"].map(mod => mod.name);\n      const second = this.state.yourmods[year][\"Sem 2\"].map(mod => mod.name);\n      currmods = currmods.concat(first.concat(second));\n    }\n    return currmods;\n  };\n\n  searchMods = mod => {\n    this.setState({\n      mod: mod\n    });\n  };\n\n  // Parses boolTree objs to return a html tree\n  modMavenTree = obj => {\n    if (typeof obj !== \"object\") {\n      return (\n        <button key={obj} onClick={() => this.searchMods(obj)}>\n          {obj}\n        </button>\n      );\n    } else if (obj.constructor === Array) {\n      return obj.map(mod => this.modMavenTree(mod));\n    } else {\n      const isMod = key =>\n        [\n          \"Prerequisite Tree\",\n          \"Either of\",\n          \"All of\",\n          \"Preclusions\",\n          \"Prerequisites\",\n          \"Needed by\",\n          \"Only\"\n        ].indexOf(key) === -1;\n      const replace = key =>\n        key === \"or\" ? (\n          \"Any of\"\n        ) : key === \"and\" ? (\n          \"All of\"\n        ) : isMod(key) ? (\n          <button key={key} onClick={() => this.searchMods(key)}>\n            {key}\n          </button>\n        ) : (\n          key\n        );\n      return Object.keys(obj).map(key => (\n        <table key={key}>\n          <tbody>\n            <tr>\n              <td>{replace(key)}</td>\n              <td>{this.modMavenTree(obj[key])}</td>\n            </tr>\n          </tbody>\n        </table>\n      ));\n    }\n  };\n\n  // Builds entire prereq tree and updates state\n  buildPreReqTree = year => {\n    const mod = this.state.result.ModuleCode;\n    const getPrereqs = mod => {\n      if (mod === undefined) {\n        return undefined;\n      }\n\n      const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n      return axios\n        .get(url)\n        .then(response => response.data.ParsedPrerequisite)\n        .catch(error => {\n          console.log(error);\n          return undefined;\n        });\n    };\n\n    const buildTree = node => {\n      if (typeof node === \"object\") {\n        // If node is a boolTree\n        return Promise.all(\n          Object.keys(node).map(boolOp =>\n            buildTree(node[boolOp]).then(treeArray => {\n              // An array of preReqTrees\n              node[boolOp] = treeArray;\n            })\n          )\n        ).then(result => node);\n      } else if (node.constructor === Array) {\n        // If node is an array of mods\n        return Promise.all(node.map(buildTree));\n      } else {\n        // If node is a single mod\n        return getPrereqs(node).then(boolTree => {\n          if (boolTree === undefined) {\n            // If mod has no prerequisites (Either mod does not exist or it is a foundational mod)\n            return node;\n          } else {\n            if (typeof boolTree === \"object\") {\n              return buildTree(boolTree).then(result => ({ [node]: result }));\n            } else {\n              // If there is only one prerequisite\n              return buildTree(boolTree).then(result => ({\n                [node]: { Only: result }\n              }));\n            }\n          }\n        });\n      }\n    };\n\n    buildTree(mod).then(result => {\n      const temp = { \"Prerequisite Tree\": result };\n      console.log(\"Prerequisite Tree\");\n      console.log(temp);\n      this.setState({\n        preReqTree: temp\n      });\n    });\n  };\n\n  // Parses boolTree objs to return a bool value(prerequisites, preclusions)\n  parseBoolTree = (obj, currmods) => {\n    if (typeof obj !== \"object\") {\n      return currmods.indexOf(obj) >= 0;\n    } else {\n      // console.log(obj);\n      const or =\n        obj.or == null\n          ? true\n          : obj.or.reduce(\n              (acc, elem) => acc || this.parseBoolTree(elem, currmods),\n              false\n            );\n      const and =\n        obj.and == null\n          ? true\n          : obj.and.reduce(\n              (acc, elem) => acc && this.parseBoolTree(elem, currmods),\n              true\n            );\n      // console.log(or, and);\n      return or && and;\n    }\n  };\n\n  checkPreclusion = currmods => {\n    if (\n      this.state.result === undefined ||\n      this.state.result.ParsedPreclusion === undefined\n    )\n      return false;\n    else\n      return this.parseBoolTree(this.state.result.ParsedPreclusion, currmods);\n  };\n\n  checkPrereqs = currmods => {\n    // console.log(this.state.result);\n    if (\n      this.state.result === undefined ||\n      this.state.result.ParsedPrerequisite === undefined\n    )\n      return true;\n    else\n      return this.parseBoolTree(this.state.result.ParsedPrerequisite, currmods);\n  };\n\n  checkDuplicates = (mod, currmods) => {\n    return currmods.filter(currmod => currmod === mod).length > 0;\n  };\n\n  addMod = (mod, sem, year) => {\n    const currmods = this.getCurrMods();\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    // console.log(\"test0\");\n    // Checks for terminating conditions\n    if (this.checkDuplicates(mod, currmods)) {\n      this.setState({ error: \"No duplicates\" });\n      // console.log(\"test1\");\n      return undefined;\n    } else if (this.checkPreclusion(currmods)) {\n      this.setState({ error: \"Already precluded\" });\n      // console.log(\"test2\");\n      return undefined;\n    } else if (!this.checkPrereqs(currmods)) {\n      this.setState({ error: \"Lack prerequisites\" });\n      // console.log(\"test3\");\n      return undefined;\n    }\n\n    // console.log(\"test\");\n    if (this.state.result !== undefined) {\n      if (temp[year] === undefined) {\n        temp[year] = { \"Sem 1\": [], \"Sem 2\": [] };\n      }\n      temp[year][sem] = temp[year][sem].concat([\n        { name: mod, mcs: this.state.result.ModuleCredit }\n      ]);\n    }\n\n    // Updates yourmods, mcs, and clears error\n    const newMcs =\n      this.state.result === undefined\n        ? 0\n        : parseInt(this.state.result.ModuleCredit);\n    // console.log(temp, newMcs);\n    this.setState(state => ({\n      yourmods: temp,\n      mcs: state.mcs + newMcs,\n      error: \"\"\n    }));\n  };\n\n  delMod = (mod, mcs, sem, year) => {\n    const temp = JSON.parse(JSON.stringify(this.state.yourmods));\n    temp[year][sem] = temp[year][sem].filter(elem => elem.name !== mod);\n    this.setState((state, props) => ({\n      yourmods: temp,\n      mcs: state.mcs - mcs\n    }));\n  };\n\n  updateResult = result => {\n    this.setState(state => ({\n      result: result\n    }));\n  };\n\n  updateHistory = mod => {\n    this.setState(state => ({\n      history: state.history.concat([mod]).slice(-10)\n    }));\n  };\n\n  updateError = error => {\n    this.setState({ error: error });\n  };\n\n  // PLEASE DELETE\n  // componentDidUpdate = () => {\n  // console.log(this.state);\n  // };\n\n  render() {\n    const unwantedProps = [\n      \"LockedModules\",\n      \"ParsedPreclusion\",\n      \"ParsedPrerequisite\",\n      \"ModmavenTree\",\n      \"History\",\n      \"Timetable\",\n      \"LecturePeriods\",\n      \"TutorialPeriods\",\n      \"CorsBiddingStats\",\n      \"Workload\"\n    ];\n    const mmTree =\n      this.state.result !== undefined\n        ? {\n            Preclusions: this.state.result.ParsedPreclusion,\n            Prerequisites: this.state.result.ParsedPrerequisite,\n            \"Needed by\": this.state.result.LockedModules\n          }\n        : \"\";\n    return (\n      <div className=\"App\">\n        <div>\n          Your Mods:\n          {this.makePlan(this.state.yourmods, [])} <br />\n          Your MCs: {this.state.mcs}\n          <br />\n        </div>\n        <div>\n          <SearchBar\n            addMod={this.addMod}\n            buildPreReqTree={this.buildPreReqTree}\n            updateResult={this.updateResult}\n            updateHistory={this.updateHistory}\n            updateError={this.updateError}\n            year={this.state.year}\n            mod={this.state.mod}\n            error={this.state.error}\n          />\n          {this.convertObj(\n            this.filterObjProps(unwantedProps, this.state.result)\n          )}\n          {this.modMavenTree(mmTree)}\n          {this.modMavenTree(this.state.preReqTree)}\n        </div>\n        <div>\n          History:\n          {this.state.history.map(result => (\n            <p onClick={() => this.searchMods(result)}>\n              {result}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}