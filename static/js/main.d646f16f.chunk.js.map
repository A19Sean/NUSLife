{"version":3,"sources":["SearchBar/component.js","SearchBar/container.js","StudentPlan/component.js","StudentPlan/container.js","App.js","serviceWorker.js","index.js"],"names":["SearchBarComponent","generateYears","n","year","parseInt","Date","toISOString","slice","Array","from","val","i","renderYears","react_default","a","createElement","Fragment","_this","map","key","_this2","this","onSubmit","props","handleSubmit","type","name","value","onChange","handleChange","placeholder","id","onClick","handleClick","selectSem","selectYear","style","color","error","autocomplete","module","searchMods","Component","SearchBar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mod","url","concat","console","log","axios","get","then","response","setState","state","selectedMod","data","ModuleCode","updateError","updateResult","updateHistory","catch","event","preventDefault","target","toUpperCase","modcodes","modules","results","filter","RegExp","test","sem","addMod","componentDidMount","componentDidUpdate","prevProps","component_SearchBarComponent","StudentPlanComponent","makePlan","obj","makeSem","mods","getMods","makeButton","delMod","grade","e","updateGrade","makeMod","result","makeTable","getOverload","studentMods","getYears","mcs","StudentPlan","setGrade","plan","modName","newPlan","copyObj","find","setAppState","currStudentMods","newMods","elem","newStudentMods","setMods","component_StudentPlanComponent","App","defineProperty","JSON","parse","stringify","filterObjProps","blacklist","temp","prop","click","text","formatYear","replace","buildTreeButton","buildPreReqTree","AcadYear","fn","convertObj","constructor","keys","isValInArr","arr","undefined","initMod","Name","MCs","Grade","initSem","Mods","Overload","initYear","Sem 1","Sem 2","getYear","getSem","getName","getMCs","getGrade","setSem","setYear","setOverload","currmods","getCurrMods","arguments","length","maxYear","first","second","reduce","acc","parseBoolTree","or","and","checkOverload","total","ParsedPreclusion","checkPreclusion","ParsedPrerequisite","checkPrereqs","isOverload","yearInt","ModuleCredit","newMcs","modMavenTree","isMod","buildTree","node","Promise","all","boolOp","treeArray","getPrerequisites","boolTree","Only","Prerequisite Tree","preReqTree","getPreclusions","updateOverload","history","handleKeyInput","mmTree","Preclusions","Prerequisites","Needed by","LockedModules","className","onKeyDown","container_StudentPlan","container_SearchBar","index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAGqBA,6MACnBC,cAAgB,SAAAC,GAEd,IAAMC,EAAOC,UAAS,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IAAM,EAC9D,OAAOC,MAAMC,KAAK,IAAID,MAAMN,GAAI,SAACQ,EAAKC,GAAN,OAAYR,EAAOQ,OAGrDC,YAAc,kBACZC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACGC,EAAKhB,cAAc,IAAIiB,IAAI,SAAAf,GAAI,OAC9BU,EAAAC,EAAAC,cAAA,UAAQI,IAAKhB,GAAOA,EAAO,KAAOA,EAAO,gFAKtC,IAAAiB,EAAAC,KACP,OACER,EAAAC,EAAAC,cAAA,QAAMO,SAAUD,KAAKE,MAAMC,cAA3B,eAEEX,EAAAC,EAAAC,cAAA,SACEU,KAAK,OACLC,KAAK,OACLC,MAAON,KAAKE,MAAMI,MAClBC,SAAUP,KAAKE,MAAMM,aACrBC,YAAa,mBAEfjB,EAAAC,EAAAC,cAAA,SAAOU,KAAK,SAASE,MAAM,WAC3Bd,EAAAC,EAAAC,cAAA,UAAQU,KAAK,SAASM,GAAG,UAAUC,QAASX,KAAKE,MAAMU,aAAvD,cAGApB,EAAAC,EAAAC,cAAA,WAbF,YAeEF,EAAAC,EAAAC,cAAA,UAAQgB,GAAG,aAAaC,QAASX,KAAKE,MAAMW,WAC1CrB,EAAAC,EAAAC,cAAA,UAAQY,MAAM,KAAd,KACAd,EAAAC,EAAAC,cAAA,UAAQY,MAAM,KAAd,MAjBJ,QAoBEd,EAAAC,EAAAC,cAAA,UAAQgB,GAAG,cAAcC,QAASX,KAAKE,MAAMY,YAC1Cd,KAAKT,eAERC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMqB,MAAO,CAAEC,MAAO,QAAUhB,KAAKE,MAAMe,OAC1CjB,KAAKE,MAAMgB,aAAarB,IAAI,SAAAsB,GAAM,OACjC3B,EAAAC,EAAAC,cAAA,KACEI,IAAKqB,EACLR,QAAS,kBAAMZ,EAAKG,MAAMkB,WAAWrB,EAAKG,MAAMpB,KAAMqC,KAErDA,aAhDmCE,aCG3BC,cACnB,SAAAA,IAAc,IAAA1B,EAAA,OAAA2B,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACZ1B,EAAA2B,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,QAWFoB,WAAa,SAACtC,EAAM8C,GAClB,IAAMC,EAAG,2BAAAC,OAA8BhD,EAA9B,aAAAgD,OAA8CF,EAA9C,SACTG,QAAQC,IAAIH,GACZI,IACGC,IAAIL,GACJM,KAAK,SAAAC,GACJxC,EAAKyC,SAAS,SAAAC,GAAK,MAAK,CACtBhC,MAAOsB,EACP9C,KAAMA,EACNoC,aAAc,GACdqB,YAAaH,EAASI,KAAKC,cAE7B7C,EAAKM,MAAMwC,YAAY,IACvB9C,EAAKM,MAAMyC,aAAaP,EAASI,MACjC5C,EAAKM,MAAM0C,cAAchB,KAE1BiB,MAAM,SAAA5B,GACLc,QAAQC,IAAIf,GACZrB,EAAKM,MAAMwC,YAAY,4BA9Bf9C,EAkCdO,aAAe,SAAA2C,GACbA,EAAMC,iBACNnD,EAAKwB,WAAWxB,EAAK0C,MAAMxD,KAAMc,EAAK0C,MAAMhC,QApChCV,EAuCdY,aAAe,SAAAsC,GACb,IAAMxC,EAAQwC,EAAME,OAAO1C,MAAM2C,cAC3BC,EAAWtD,EAAK0C,MAAMa,QAAQtD,IAAI,SAAA+B,GAAG,OAAIA,EAAG,aAC5CwB,EACM,KAAV9C,EACI,GACA4C,EAASG,OAAO,SAAAzB,GAAG,OAAI0B,OAAOhD,EAAQ,KAAKiD,KAAK3B,KAAM1C,MAAM,EAAG,IACrEU,EAAKyC,SAAS,CACZ/B,MAAOA,EACPY,aAAckC,KAhDJxD,EAoDdgB,YAAc,WACZ,GAA8B,MAA1BhB,EAAK0C,MAAMC,YAAf,CAIA,IAAMzD,EAAOc,EAAK0C,MAAMxD,KAClB0E,EAAM,OAAS5D,EAAK0C,MAAMkB,IAC1B5B,EAAMhC,EAAK0C,MAAMC,YAEvB3C,EAAKM,MAAMuD,OAAO7B,EAAK4B,EAAK1E,QAP1Bc,EAAKM,MAAMwC,YAAY,oBAtDb9C,EAgEdiB,UAAY,SAAAiC,GACVlD,EAAKyC,SAAS,CAAEmB,IAAKV,EAAME,OAAO1C,SAjEtBV,EAoEdkB,WAAa,SAAAgC,GACXlD,EAAKyC,SAAS,CAAEvD,KAAMgE,EAAME,OAAO1C,QACnC2B,IACGC,IADH,2BAAAJ,OACkCgB,EAAME,OAAO1C,MAD/C,qBAEG6B,KAAK,SAAAC,GACJxC,EAAKyC,SAAS,CACZc,QAASf,EAASI,UA1EZ5C,EA+Ed8D,kBAAoB,WAClBzB,IACGC,IADH,2BAAAJ,OACkClC,EAAK0C,MAAMxD,KAD7C,qBAEGqD,KAAK,SAAAC,GACJxC,EAAKyC,SAAS,CACZc,QAASf,EAASI,UApFZ5C,EAyFd+D,mBAAqB,SAAAC,GACfA,EAAUhC,MAAQhC,EAAKM,MAAM0B,KAC/BhC,EAAKwB,WAAWxB,EAAK0C,MAAMxD,KAAMc,EAAKM,MAAM0B,MAzF9ChC,EAAK0C,MAAQ,CACXhC,MAAO,GACPkD,IAAK,IACL1E,KAAM,YACNqE,QAAS,GACTjC,aAAc,GACdqB,YAAa,IARH3C,wEAgGZ,OACEJ,EAAAC,EAAAC,cAACmE,EAAD,CACE3C,aAAclB,KAAKsC,MAAMpB,aACzBD,MAAOjB,KAAKE,MAAMe,MAClBL,YAAaZ,KAAKY,YAClBJ,aAAcR,KAAKQ,aACnBL,aAAcH,KAAKG,aACnBiB,WAAYpB,KAAKoB,WACjBP,UAAWb,KAAKa,UAChBC,WAAYd,KAAKc,WACjBR,MAAON,KAAKsC,MAAMhC,MAClBxB,KAAMkB,KAAKsC,MAAMxD,cA5GcuC,aCHlByC,6MACnBC,SAAW,SAAAC,GACT,IAoCMC,EAAU,SAACnF,EAAM0E,GACrB,IAAMU,EAAOtE,EAAKM,MACfiE,QAAQH,EAAKlF,EAAM0E,GACnB3D,IAAI,SAAA+B,GAAG,OAvCI,SAAC9C,EAAM0E,EAAK5B,GAAZ,OACdpC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgBG,IAAK8B,GAClBhC,EAAKM,MAAMkE,WACVxC,EAAG,KACH,kBAAMhC,EAAKM,MAAMmE,OAAOzC,EAAG,KAAUA,EAAG,IAAS9C,EAAM0E,IACvD5B,EAAG,MAGHpC,EAAAC,EAAAC,cAAA,cACG,CACC,EACA,IACA,EACA,IACA,EACA,IACA,EACA,IACA,EACA,GACA,EACA,IACA,KACAG,IAAI,SAAAyE,GAAK,OACT9E,EAAAC,EAAAC,cAAA,UACEI,IAAKwE,EACL3D,QAAS,SAAA4D,GAAC,OAAI3E,EAAKM,MAAMsE,YAAYD,EAAGzF,EAAM0E,EAAK5B,EAAG,QAErD0C,OAWGG,CAAQ3F,EAAM0E,EAAK5B,KAoB3B8C,EACJlF,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACGC,EAAKM,MAAMyE,UAAU,OAAQT,GAC7BtE,EAAKM,MAAMyE,UAAU,WAtBT,WACf,GAAI/E,EAAKM,MAAM0E,YAAYhF,EAAKM,MAAM2E,YAAa/F,EAAM0E,GACvD,OACEhE,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,6BAqBR,OAAOE,EAAKM,MAAMyE,UAAUnB,EAAKkB,IAanC,OAAO9E,EAAKM,MAAM4E,SAASlF,EAAKM,MAAM2E,aAAahF,IAVlC,SAAAf,GACf,IAAM4F,EACJlF,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACGsE,EAAQnF,EAAM,SACdmF,EAAQnF,EAAM,UAGnB,OAAOc,EAAKM,MAAMyE,UAAU7F,EAAM4F,8EAOpC,OACElF,EAAAC,EAAAC,cAAA,wBAEGM,KAAK+D,SAAS/D,KAAKE,MAAM2E,YAAa,IAFzC,IAE8CrF,EAAAC,EAAAC,cAAA,WAF9C,aAGaM,KAAKE,MAAM6E,IACtBvF,EAAAC,EAAAC,cAAA,mBAzF0C2B,aCE7B2D,6MACnBC,SAAW,SAACC,EAAMpG,EAAM0E,EAAK2B,EAASb,GACpC,IAAMc,EAAUxF,EAAKM,MAAMmF,QAAQH,GAInC,OAHAE,EAAQtG,GAAM0E,GAAd,KAA2B8B,KAAK,SAAA1D,GAAG,OAAIA,EAAG,OAAauD,IAAvD,MAEIb,EACGc,KAGTZ,YAAc,SAAC1B,EAAOhE,EAAM0E,EAAK2B,GAC/B,IAAMjB,EAAOtE,EAAKqF,SAChBrF,EAAKM,MAAM2E,YACX/F,EACA0E,EACA2B,EACArC,EAAME,OAAO1C,OAEfV,EAAKM,MAAMqF,YAAY,cAAerB,MAGxCG,OAAS,SAACzC,EAAKmD,EAAKjG,EAAM0E,GACxB,IAAIgC,EAAkB5F,EAAKM,MAAMmF,QAAQzF,EAAKM,MAAM2E,aAC9CY,EAAU7F,EAAKM,MAClBiE,QAAQqB,EAAiB1G,EAAM0E,GAC/BH,OAAO,SAAAqC,GAAI,OAAIA,EAAI,OAAa9D,IAC7B+D,EAAiB/F,EAAKM,MAAM0F,QAChCJ,EACA1G,EACA0E,EACAiC,GAEF7F,EAAKM,MAAMqF,YAAY,cAAeI,GACtC/F,EAAKM,MAAMqF,YAAY,KAAM3F,EAAKM,MAAM6E,IAAMA,4EAI9C,OACEvF,EAAAC,EAAAC,cAACmG,EAAD,CACExB,OAAQrE,KAAKqE,OACbF,QAASnE,KAAKE,MAAMiE,QACpBS,YAAa5E,KAAKE,MAAM0E,YACxBE,SAAU9E,KAAKE,MAAM4E,SACrBV,WAAYpE,KAAKE,MAAMkE,WACvBO,UAAW3E,KAAKE,MAAMyE,UACtBI,IAAK/E,KAAKE,MAAM6E,IAChBF,YAAa7E,KAAKE,MAAM2E,YACxBL,YAAaxE,KAAKwE,qBA9CenD,aCoe1ByE,qBAndb,SAAAA,IAAc,IAAAlG,EAAA,OAAA2B,OAAAC,EAAA,EAAAD,CAAAvB,KAAA8F,IACZlG,EAAA2B,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAuE,GAAAnE,KAAA3B,QAYFuF,YAAc,SAACzF,EAAKQ,GAClBV,EAAKyC,SAALd,OAAAwE,EAAA,EAAAxE,CAAA,GACGzB,EAAMQ,KAfGV,EAmBdyF,QAAU,SAAArB,GAAG,OAAIgC,KAAKC,MAAMD,KAAKE,UAAUlC,KAnB7BpE,EAsBduG,eAAiB,SAACC,EAAWpC,GAC3B,GAAmB,kBAARA,EAAkB,CAC3B,IAAMqC,EAAOzG,EAAKyF,QAAQrB,GAE1B,OADAoC,EAAUvG,IAAI,SAAAyG,GAAI,cAAWD,EAAKC,KAC3BD,EAEP,OAAOrC,GA5BGpE,EAgCdwE,WAAa,SAACtE,EAAKyG,EAAOC,GAAb,OACXhH,EAAAC,EAAAC,cAAA,UAAQI,IAAKA,EAAKa,QAAS4F,GACxBC,IAlCS5G,EAsCd6G,WAAa,SAAA3H,GACX,OAAOA,EAAK4H,QAAQ,IAAK,MAvCb9G,EA0Cd+G,gBAAkB,SAAA7G,GAChB,GAAY,kBAARA,EACF,OACEN,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,WACCE,EAAKwE,WACJtE,EACA,kBACEF,EAAKgH,gBAAgBhH,EAAK6G,WAAW7G,EAAK0C,MAAMoC,OAAOmC,YACzD,uBAnDIjH,EAyDd+E,UAAY,SAAC7E,EAAKgH,GAAN,OACVtH,EAAAC,EAAAC,cAAA,SAAOI,IAAKA,GACVN,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGI,EACAF,EAAK+G,gBAAgB7G,IAExBN,EAAAC,EAAAC,cAAA,UAAKoH,OAjEClH,EAwEdmH,WAAa,SAAA/C,GACX,MAAmB,kBAARA,EACFA,EACEA,EAAIgD,cAAgB7H,MACtB6E,EAAInE,IAAI,SAAA6F,GACb,OAAO9F,EAAKmH,WAAWrB,KAGlBnE,OAAO0F,KAAKjD,GAAKnE,IAAI,SAAAC,GAAG,OAC7BF,EAAK+E,UAAU7E,EAAKF,EAAKmH,WAAW/C,EAAIlE,QAjFhCF,EAsFdsH,WAAa,SAAC7H,EAAK8H,GAAN,YAAiDC,IAAnCD,EAAI7B,KAAK,SAAAI,GAAI,OAAIA,IAASrG,KAtFvCO,EAwFdyH,QAAU,SAACzF,EAAKmD,EAAKT,GAAX,MAAsB,CAAEgD,KAAM1F,EAAK2F,IAAKxC,EAAKyC,MAAOlD,IAxFhD1E,EAyFd6H,QAAU,iBAAO,CAAEC,KAAM,GAAIC,UAAU,IAzFzB/H,EA0FdgI,SAAW,iBAAO,CAAEC,QAASjI,EAAK6H,UAAWK,QAASlI,EAAK6H,YA1F7C7H,EA4FdkF,SAAW,SAAAI,GAAI,OAAI3D,OAAO0F,KAAK/B,IA5FjBtF,EA6FdmI,QAAU,SAAC7C,EAAMpG,GAAP,OAAgBoG,EAAKpG,IA7FjBc,EA8FdoI,OAAS,SAAC9C,EAAMpG,EAAM0E,GAAb,OAAqB5D,EAAKmI,QAAQ7C,EAAMpG,GAAM0E,IA9FzC5D,EA+FdgF,YAAc,SAACM,EAAMpG,EAAM0E,GAAb,OAAqB5D,EAAKoI,OAAO9C,EAAMpG,EAAM0E,GAAxB,UA/FrB5D,EAgGduE,QAAU,SAACe,EAAMpG,EAAM0E,GAAb,OAAqB5D,EAAKoI,OAAO9C,EAAMpG,EAAM0E,GAAxB,MAhGjB5D,EAkGdqI,QAAU,SAAArG,GAAG,OAAIA,EAAG,MAlGNhC,EAmGdsI,OAAS,SAAAtG,GAAG,OAAIA,EAAG,KAnGLhC,EAoGduI,SAAW,SAAAvG,GAAG,OAAIA,EAAG,OApGPhC,EAsGdgG,QAAU,SAACV,EAAMpG,EAAM0E,EAAKU,GAC1B,IAAMmC,EAAOzG,EAAKyF,QAAQH,GAE1B,OADAmB,EAAKvH,GAAM0E,GAAX,KAA0BU,EACnBmC,GAzGKzG,EA2GdwI,OAAS,SAAClD,EAAMpG,EAAM0E,EAAKQ,GACzB,IAAMqC,EAAOzG,EAAKyF,QAAQH,GAE1B,OADAmB,EAAKvH,GAAM0E,GAAOQ,EACXqC,GA9GKzG,EAgHdyI,QAAU,SAACnD,EAAMpG,EAAMkF,GACrB,IAAMqC,EAAOzG,EAAKyF,QAAQH,GAE1B,OADAmB,EAAKvH,GAAQkF,EACNqC,GAnHKzG,EAqHd0I,YAAc,SAACpD,EAAMpG,EAAM0E,GACzB,IAAM6C,EAAOzG,EAAKyF,QAAQH,GAE1B,OADAmB,EAAKvH,GAAM0E,GAAX,UAA+B6C,EAAKvH,GAAM0E,GAAX,SACxB6C,GAxHKzG,EA2Hd6D,OAAS,SAAC7B,EAAK4B,EAAK1E,GAClB,QAA0BsI,IAAtBxH,EAAK0C,MAAMoC,OAAf,CAMA,IA2DwB6D,EA3DlBC,EAAc,WAA0C,IAAzChF,EAAyCiF,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,GAAAA,UAAA,GAAnC,QAASE,EAA0BF,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,GAAAA,UAAA,GAAhB,YAkB5C,OAJiB7I,EAAKkF,SAASlF,EAAK0C,MAAMuC,aACvChF,IAdmB,SAAAf,GACpB,IAAMoG,EAAOtF,EAAK0C,MAAMuC,YACxB,GAAI/F,EAAO6J,GAAY7J,IAAS6J,GAAmB,UAARnF,EAAkB,CAC3D,IAAMoF,EAAQhJ,EAAKuE,QAAQe,EAAMpG,EAAM,SAASe,IAAID,EAAKqI,SACnDY,EAASjJ,EAAKuE,QAAQe,EAAMpG,EAAM,SAASe,IAAID,EAAKqI,SAC1D,OAAOW,EAAM9G,OAAO+G,GACf,OAAI/J,IAAS6J,GAAmB,UAARnF,EACtB5D,EAAKuE,QAAQe,EAAMpG,EAAM,SAASe,IAAID,EAAKqI,SAE3C,KAMRa,OAAO,SAACC,EAAK5B,GAAN,OAAc4B,EAAIjH,OAAOqF,IAAM,KAMrC6B,EAAgB,SAAhBA,EAAiBhF,EAAKuE,GAAoCE,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,IAAAA,UAAA,GAC9D,GAAmB,kBAARzE,EACT,OAAOpE,EAAKsH,WAAWlD,EAAKuE,GAE5B,IAAMU,EACM,MAAVjF,EAAIiF,IAEAjF,EAAIiF,GAAGH,OACL,SAACC,EAAKrD,GAAN,OAAeqD,GAAOC,EAActD,EAAM6C,KAC1C,GAEFW,EACO,MAAXlF,EAAIkF,KAEAlF,EAAIkF,IAAIJ,OACN,SAACC,EAAKrD,GAAN,OAAeqD,GAAOC,EAActD,EAAM6C,KAC1C,GAER,OAAOU,GAAMC,GAuBXC,EAAgB,WACpB,QAAmD/B,IAA/CxH,EAAKmI,QAAQnI,EAAK0C,MAAMuC,YAAa/F,GACvC,OAAO,EAEP,IAEMsK,EAAQxJ,EAAKuE,QAAQvE,EAAK0C,MAAMuC,YAAa/F,EAAM0E,GACtD3D,IAAI,SAAA+B,GAAG,OAAI7C,SAASa,EAAKsI,OAAOtG,MAChCkH,OAAO,SAACC,EAAKhE,GAAN,OAAcgE,EAAMhE,GAAK,GACnC,OAAOqE,GAJU,GAIU,EAAIA,GALlB,GAKkC,EAAI,GAIvD,GAjBwBb,EAiBJC,IAhBX5I,EAAKsH,WAAWtF,EAAK2G,GAiB5B3I,EAAK8C,YAAY,sBAGnB,GApCwB,SAAA6F,GACtB,YAA2CnB,IAAvCxH,EAAK0C,MAAMoC,OAAO2E,kBACVL,EAAcpJ,EAAK0C,MAAMoC,OAAO2E,iBAAkBd,GAkC5De,CAAgBd,KAClB5I,EAAK8C,YAAY,0BAGnB,GAnCqB,SAAA6F,GACnB,YAA6CnB,IAAzCxH,EAAK0C,MAAMoC,OAAO6E,oBAEbP,EACLpJ,EAAK0C,MAAMoC,OAAO6E,mBAClBhB,GACA,GA6BDiB,CAAahB,EAAYhF,EAAK1E,IAAnC,CAIA,GAAIqK,IAAkB,EAAG,CACvB,IAAM7I,EAAQ6I,IAERM,EAAa7J,EAAKgF,YAAYhF,EAAK0C,MAAMuC,YAAa/F,EAAM0E,GAClE,GAAc,IAAVlD,IAAgBmJ,EAAY,CAC9B7J,EAAK8C,YAAY,aAEjB,IAAMgH,EAAU3K,SAASD,EAAKI,MAAM,EAAG,IAKvC,OAJAJ,EAAe,UAAR0E,EAAkB1E,EAAO4K,EAAU,EAAI,KAAOA,EAAU,GAC/DlG,EAAc,UAARA,EAAkB,QAAU,aAElC5D,EAAK6D,OAAO7B,EAAK4B,EAAK1E,GAEH,IAAVwB,GACTV,EAAK8C,YACH,wDAKN,IAAI2D,EAAOzG,EAAKyF,QAAQzF,EAAK0C,MAAMuC,kBACgBuC,IAA/CxH,EAAKmI,QAAQnI,EAAK0C,MAAMuC,YAAa/F,KACvCuH,EAAOzG,EAAKyI,QAAQhC,EAAMvH,EAAMc,EAAKgI,aAEvC,IAAInC,EAAU7F,EAAKuE,QAAQkC,EAAMvH,EAAM0E,GAAK1B,OAC1ClC,EAAKyH,QAAQzF,EAAKhC,EAAK0C,MAAMoC,OAAOiF,aAAc,IAEpDtD,EAAOzG,EAAKgG,QAAQS,EAAMvH,EAAM0E,EAAKiC,GAGrC,IAAMmE,EAAS7K,SAASa,EAAK0C,MAAMoC,OAAOiF,cAC1C/J,EAAKyC,SAAS,SAAAC,GAAK,MAAK,CACtBuC,YAAawB,EACbtB,IAAKzC,EAAMyC,IAAM6E,UApCjBhK,EAAK8C,YAAY,2BA1FjB9C,EAAK8C,YAAY,oBA7HP9C,EAgQdiK,aAAe,SAAA7F,GACb,QAAYoD,IAARpD,GAA6B,KAARA,EAAzB,CAGA,GAAmB,kBAARA,EACT,OAAOpE,EAAKwE,WAAWJ,EAAK,kBAAMpE,EAAKwB,WAAW4C,IAAMA,GAE1D,GAAIA,EAAIgD,cAAgB7H,MACtB,OAAO6E,EAAInE,IAAI,SAAA+B,GAAG,OAAIhC,EAAKiK,aAAajI,KAE1C,IAUM8E,EAAU,SAAA5G,GACd,MAAY,OAARA,EAAqB,SACb,QAARA,EAAsB,SAZd,SAAAA,GAAG,OACdF,EAAKsH,WAAWpH,EAAK,CACpB,oBACA,YACA,SACA,cACA,gBACA,YACA,SAKEgK,CAAMhK,GACDF,EAAKwE,WAAWtE,EAAK,kBAAMF,EAAKwB,WAAWtB,IAAMA,GACnDA,GAET,OAAOyB,OAAO0F,KAAKjD,GAAKnE,IAAI,SAAAC,GAAG,OAC7BF,EAAK+E,UAAU+B,EAAQ5G,GAAMF,EAAKiK,aAAa7F,EAAIlE,SA5RzCF,EAiSdgH,gBAAkB,SAAA9H,GAChB,QAA0BsI,IAAtBxH,EAAK0C,MAAMoC,OAAf,EAGkB,SAAZqF,EAAYC,GAChB,MAAoB,kBAATA,EAEFC,QAAQC,IACb3I,OAAO0F,KAAK+C,GAAMnK,IAAI,SAAAsK,GAAM,OAC1BJ,EAAUC,EAAKG,IAAShI,KAAK,SAAAiI,GAE3BJ,EAAKG,GAAUC,OAGnBjI,KAAK,SAAAuC,GAAM,OAAIsF,IACRA,EAAKhD,cAAgB7H,MAEvB8K,QAAQC,IAAIF,EAAKnK,IAAIkK,IAGrBnK,EAAKyK,iBAAiBvL,EAAMkL,GAAM7H,KAAK,SAAAmI,GAC5C,YAAiBlD,IAAbkD,EAEKN,EAEiB,kBAAbM,EACFP,EAAUO,GAAUnI,KAAK,SAAAuC,GAAM,OAAAnD,OAAAwE,EAAA,EAAAxE,CAAA,GAAQyI,EAAOtF,KAG9CqF,EAAUO,GAAUnI,KAAK,SAAAuC,GAAM,OAAAnD,OAAAwE,EAAA,EAAAxE,CAAA,GACnCyI,EAAO,CAAEO,KAAM7F,SAQ5BqF,CApCYnK,EAAK0C,MAAMoC,OAAOjC,YAoCfN,KAAK,SAAAuC,GAClB,IAAM2B,EAAO,CAAEmE,oBAAqB9F,GACpC9E,EAAKyC,SAAS,CACZoI,WAAYpE,QA1UJzG,EA+UdyK,iBAAmB,SAACvL,EAAM8C,GACxB,QAAYwF,IAARxF,EAAJ,CAIA,IAAMC,EAAG,2BAAAC,OAA8BhD,EAA9B,aAAAgD,OAA8CF,EAA9C,SAET,OAAOK,IACJC,IAAIL,GACJM,KAAK,SAAAC,GAAQ,OAAIA,EAASI,KAAK+G,qBAC/B1G,MAAM,SAAA5B,GACLc,QAAQC,IAAIf,OA1VJrB,EA+Vd8K,eAAiB,SAAC5L,EAAM8C,GACtB,QAAYwF,IAARxF,EAAJ,CAIA,IAAMC,EAAG,2BAAAC,OAA8BhD,EAA9B,aAAAgD,OAA8CF,EAA9C,SAET,OAAOK,IACJC,IAAIL,GACJM,KAAK,SAAAC,GAAQ,OAAIA,EAASI,KAAK6G,mBAC/BxG,MAAM,SAAA5B,GACLc,QAAQC,IAAIf,OA1WJrB,EA+WdwB,WAAa,SAAAQ,GACXhC,EAAKyC,SAAS,CACZT,IAAKA,KAjXKhC,EAqXd+K,eAAiB,SAAC7L,EAAM0E,GACtB,IAAM6C,EAAOzG,EAAK0I,YAAY1I,EAAK0C,MAAMuC,YAAa/F,EAAM0E,GAC5D5D,EAAKyC,SAAS,CACZwC,YAAawB,KAxXHzG,EA4Xd+C,aAAe,SAAA+B,GACb9E,EAAKyC,SAAS,SAAAC,GAAK,MAAK,CACtBoC,OAAQA,MA9XE9E,EAkYdgD,cAAgB,SAAAhB,GACdhC,EAAKyC,SAAS,SAAAC,GAAK,MAAK,CACtBsI,QAAS,CAAChJ,GAAKE,OAAOQ,EAAMsI,SAAS1L,MAAM,EAAG,QApYpCU,EAwYd8C,YAAc,SAAAzB,GACZrB,EAAKyC,SAAS,CAAEpB,MAAOA,KAzYXrB,EA4YdiL,eAAiB,SAAA/H,KA1YflD,EAAK0C,MAAQ,CACXV,IAAK,GACL8C,YAAQ0C,EACRqD,WAAY,GACZG,QAAS,GACT/F,YAAa,GACbE,IAAK,EACL9D,MAAO,IATGrB,wEAgZL,IAAAG,EAAAC,KACP+B,QAAQC,IAAIhC,KAAKsC,MAAMuC,aACvB,IAcMiG,OACkB1D,IAAtBpH,KAAKsC,MAAMoC,OACP,CACEqG,YAAa/K,KAAKsC,MAAMoC,OAAO2E,iBAC/B2B,cAAehL,KAAKsC,MAAMoC,OAAO6E,mBACjC0B,YAAajL,KAAKsC,MAAMoC,OAAOwG,eAEjC,GACN,OACE1L,EAAAC,EAAAC,cAAA,OAAKyL,UAAU,MAAMC,UAAWpL,KAAK6K,gBACnCrL,EAAAC,EAAAC,cAAC2L,EAAD,CACEhG,QAASrF,KAAKqF,QACdlB,QAASnE,KAAKmE,QACdS,YAAa5E,KAAK4E,YAClBE,SAAU9E,KAAK8E,SACfV,WAAYpE,KAAKoE,WACjBO,UAAW3E,KAAK2E,UAChBI,IAAK/E,KAAKsC,MAAMyC,IAChBQ,YAAavF,KAAKuF,YAClBK,QAAS5F,KAAK4F,QACdf,YAAa7E,KAAKsC,MAAMuC,cAE1BrF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4L,EAAD,CACE7H,OAAQzD,KAAKyD,OACbd,aAAc3C,KAAK2C,aACnBC,cAAe5C,KAAK4C,cACpBF,YAAa1C,KAAK0C,YAClB5D,KAAMkB,KAAKsC,MAAMxD,KACjB8C,IAAK5B,KAAKsC,MAAMV,IAChBX,MAAOjB,KAAKsC,MAAMrB,QAEnBjB,KAAK+G,WACJ/G,KAAKmG,eA/CS,CACpB,gBACA,mBACA,qBACA,eACA,UACA,YACA,iBACA,kBACA,mBACA,WACA,eACA,cAmCyCnG,KAAKsC,MAAMoC,SAE/C1E,KAAK6J,aAAaiB,GAClB9K,KAAK6J,aAAa7J,KAAKsC,MAAMmI,aAEhCjL,EAAAC,EAAAC,cAAA,sBAEGM,KAAKsC,MAAMsI,QAAQ/K,IAAI,SAAC6E,EAAQ6G,GAAT,OACtB/L,EAAAC,EAAAC,cAAA,KAAGI,IAAKyL,EAAO5K,QAAS,kBAAMZ,EAAKqB,WAAWsD,KAC3CA,cA3cGrD,cCTEmK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtM,EAAAC,EAAAC,cAACqM,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjK,KAAK,SAAAkK,GACjCA,EAAaC","file":"static/js/main.d646f16f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class SearchBarComponent extends Component {\n  generateYears = n => {\n    // Gets current year - 4\n    const year = parseInt(new Date().toISOString().slice(0, 4)) - 4;\n    return Array.from(new Array(n), (val, i) => year + i);\n  };\n\n  renderYears = () => (\n    <React.Fragment>\n      {this.generateYears(10).map(year => (\n        <option key={year}>{year + \"-\" + (year + 1)}</option>\n      ))}\n    </React.Fragment>\n  );\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        Module Code:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.props.value}\n          onChange={this.props.handleChange}\n          placeholder={\"Search modules\"}\n        />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" id=\"add-mod\" onClick={this.props.handleClick}>\n          Add Module\n        </button>\n        <br />\n        Semester:\n        <select id=\"select-sem\" onClick={this.props.selectSem}>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n        </select>\n        Year:\n        <select id=\"select-year\" onClick={this.props.selectYear}>\n          {this.renderYears()}\n        </select>\n        <br />\n        <br />\n        <span style={{ color: \"red\" }}>{this.props.error}</span>\n        {this.props.autocomplete.map(module => (\n          <p\n            key={module}\n            onClick={() => this.props.searchMods(this.props.year, module)}\n          >\n            {module}\n          </p>\n        ))}\n      </form>\n    );\n  }\n}\n\nSearchBarComponent.propTypes = {\n  autocomplete: PropTypes.array.isRequired,\n  error: PropTypes.string,\n  handleClick: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  searchMods: PropTypes.func.isRequired,\n  selectSem: PropTypes.func.isRequired,\n  selectYear: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  year: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport SearchBarComponent from \"./component\";\n\nexport default class SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      sem: \"1\",\n      year: \"2018-2019\",\n      modules: [], // stores all modules\n      autocomplete: [],\n      selectedMod: \"\" // stored as module code\n    };\n  }\n\n  searchMods = (year, mod) => {\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n    console.log(url);\n    axios\n      .get(url)\n      .then(response => {\n        this.setState(state => ({\n          value: mod,\n          year: year,\n          autocomplete: [],\n          selectedMod: response.data.ModuleCode\n        }));\n        this.props.updateError(\"\"); // Clears error field\n        this.props.updateResult(response.data);\n        this.props.updateHistory(mod);\n      })\n      .catch(error => {\n        console.log(error);\n        this.props.updateError(\"Could not find module\");\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.searchMods(this.state.year, this.state.value);\n  };\n\n  handleChange = event => {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results =\n      value === \"\"\n        ? []\n        : modcodes.filter(mod => RegExp(value + \"+\").test(mod)).slice(0, 10);\n    this.setState({\n      value: value,\n      autocomplete: results\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.selectedMod == null) {\n      this.props.updateError(\"No mod selected\");\n      return undefined;\n    }\n    const year = this.state.year;\n    const sem = \"Sem \" + this.state.sem;\n    const mod = this.state.selectedMod;\n\n    this.props.addMod(mod, sem, year);\n  };\n\n  selectSem = event => {\n    this.setState({ sem: event.target.value });\n  };\n\n  selectYear = event => {\n    this.setState({ year: event.target.value });\n    axios\n      .get(`https://api.nusmods.com/${event.target.value}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidMount = () => {\n    axios\n      .get(`https://api.nusmods.com/${this.state.year}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (prevProps.mod !== this.props.mod) {\n      this.searchMods(this.state.year, this.props.mod);\n    }\n  };\n\n  render() {\n    return (\n      <SearchBarComponent\n        autocomplete={this.state.autocomplete}\n        error={this.props.error}\n        handleClick={this.handleClick}\n        handleChange={this.handleChange}\n        handleSubmit={this.handleSubmit}\n        searchMods={this.searchMods}\n        selectSem={this.selectSem}\n        selectYear={this.selectYear}\n        value={this.state.value}\n        year={this.state.year}\n      />\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  addMod: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  mod: PropTypes.string,\n  updateResult: PropTypes.func.isRequired,\n  updateHistory: PropTypes.func.isRequired,\n  updateError: PropTypes.func.isRequired,\n  year: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class StudentPlanComponent extends Component {\n  makePlan = obj => {\n    const makeMod = (year, sem, mod) => (\n      <React.Fragment key={mod}>\n        {this.props.makeButton(\n          mod[\"Name\"],\n          () => this.props.delMod(mod[\"Name\"], mod[\"MCs\"], year, sem),\n          mod[\"Name\"]\n        )}\n        {\n          <select>\n            {[\n              5.0,\n              4.5,\n              4.0,\n              3.5,\n              3.0,\n              2.5,\n              2.0,\n              1.5,\n              1.0,\n              0.5,\n              0.0,\n              \"S\",\n              \"U\"\n            ].map(grade => (\n              <option\n                key={grade}\n                onClick={e => this.props.updateGrade(e, year, sem, mod[\"Name\"])}\n              >\n                {grade}\n              </option>\n            ))}\n          </select>\n        }\n      </React.Fragment>\n    );\n\n    const makeSem = (year, sem) => {\n      const mods = this.props\n        .getMods(obj, year, sem)\n        .map(mod => makeMod(year, sem, mod));\n      const overload = () => {\n        if (this.props.getOverload(this.props.studentMods, year, sem)) {\n          return (\n            <React.Fragment>\n              <text>Overload!</text>\n            </React.Fragment>\n          );\n        }\n        // <React.Fragment>\n        //   {this.getOverload(this.state.studentMods, year, sem) ? (\n        //     <text>Overload!</text>\n        //   ) : (\n        //     <input\n        //       type=\"checkbox\"\n        //       onClick={() => this.updateOverload(year, sem)}\n        //     />\n        //   )}\n        // </React.Fragment>\n      };\n      const result = (\n        <React.Fragment>\n          {this.props.makeTable(\"Mods\", mods)}\n          {this.props.makeTable(\"Overload\", overload)}\n        </React.Fragment>\n      );\n      return this.props.makeTable(sem, result);\n    };\n\n    const makeYear = year => {\n      const result = (\n        <React.Fragment>\n          {makeSem(year, \"Sem 1\")}\n          {makeSem(year, \"Sem 2\")}\n        </React.Fragment>\n      );\n      return this.props.makeTable(year, result);\n    };\n\n    return this.props.getYears(this.props.studentMods).map(makeYear);\n  };\n\n  render() {\n    return (\n      <div>\n        Your Mods:\n        {this.makePlan(this.props.studentMods, [])} <br />\n        Your MCs: {this.props.mcs}\n        <br />\n      </div>\n    );\n  }\n}\n\nStudentPlanComponent.propTypes = {\n  delMod: PropTypes.func.isRequired,\n  getMods: PropTypes.func.isRequired,\n  getOverload: PropTypes.func.isRequired,\n  getYears: PropTypes.func.isRequired,\n  makeButton: PropTypes.func.isRequired,\n  makeTable: PropTypes.func.isRequired,\n  mcs: PropTypes.number.isRequired,\n  studentMods: PropTypes.object.isRequired,\n  updateGrade: PropTypes.func.isRequired\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StudentPlanComponent from \"./component\";\n\nexport default class StudentPlan extends Component {\n  setGrade = (plan, year, sem, modName, grade) => {\n    const newPlan = this.props.copyObj(plan);\n    newPlan[year][sem][\"Mods\"].find(mod => mod[\"Name\"] === modName)[\n      \"Grade\"\n    ] = grade;\n    return newPlan;\n  };\n\n  updateGrade = (event, year, sem, modName) => {\n    const mods = this.setGrade(\n      this.props.studentMods,\n      year,\n      sem,\n      modName,\n      event.target.value\n    );\n    this.props.setAppState(\"studentMods\", mods);\n  };\n\n  delMod = (mod, mcs, year, sem) => {\n    var currStudentMods = this.props.copyObj(this.props.studentMods);\n    const newMods = this.props\n      .getMods(currStudentMods, year, sem)\n      .filter(elem => elem[\"Name\"] !== mod);\n    const newStudentMods = this.props.setMods(\n      currStudentMods,\n      year,\n      sem,\n      newMods\n    );\n    this.props.setAppState(\"studentMods\", newStudentMods);\n    this.props.setAppState(\"mc\", this.props.mcs - mcs);\n  };\n\n  render() {\n    return (\n      <StudentPlanComponent\n        delMod={this.delMod}\n        getMods={this.props.getMods}\n        getOverload={this.props.getOverload}\n        getYears={this.props.getYears}\n        makeButton={this.props.makeButton}\n        makeTable={this.props.makeTable}\n        mcs={this.props.mcs}\n        studentMods={this.props.studentMods}\n        updateGrade={this.updateGrade}\n      />\n    );\n  }\n}\n\nStudentPlan.propTypes = {\n  copyObj: PropTypes.func.isRequired,\n  getMods: PropTypes.func.isRequired,\n  getOverload: PropTypes.func.isRequired,\n  getYears: PropTypes.func.isRequired,\n  makeButton: PropTypes.func.isRequired,\n  makeTable: PropTypes.func.isRequired,\n  mcs: PropTypes.number.isRequired,\n  setAppState: PropTypes.func.isRequired,\n  setMods: PropTypes.func.isRequired,\n  studentMods: PropTypes.object.isRequired\n};\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport SearchBar from \"./SearchBar\";\nimport StudentPlan from \"./StudentPlan\";\n\nimport \"./App.css\";\n\n// DONE\n// tags and sharing, preclusions as prereqs\n// Add grade calculation\n// Improve overload\n\n// TODO\n// Check for basic requirements, mod mapping\n// Other programmes besides mods eg SEP, UTCP\n// Some bugs in the ParsedPrerequisite Tree: Should be \"or\" but instead it's \"and\" eg: MA1521, MA1102R\n// Bug: Mods that are not explicitly stated as prereqs but are preclusions do not function as prereqs\n// Keyboard shortcuts\n// Tags and sharing\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mod: \"\",\n      result: undefined, // state of search result\n      preReqTree: {}, // contains preReqTree obj\n      history: [], // contains history of searched modules\n      studentMods: {}, // contains scheduled modules\n      mcs: 0,\n      error: \"\"\n    };\n  }\n\n  setAppState = (key, value) => {\n    this.setState({\n      [key]: value\n    });\n  };\n\n  copyObj = obj => JSON.parse(JSON.stringify(obj));\n\n  // Gets rid of unwanted object properties\n  filterObjProps = (blacklist, obj) => {\n    if (typeof obj === \"object\") {\n      const temp = this.copyObj(obj);\n      blacklist.map(prop => delete temp[prop]);\n      return temp;\n    } else {\n      return obj;\n    }\n  };\n\n  makeButton = (key, click, text) => (\n    <button key={key} onClick={click}>\n      {text}\n    </button>\n  );\n\n  formatYear = year => {\n    return year.replace(\"/\", \"-\");\n  };\n\n  buildTreeButton = key => {\n    if (key === \"Prerequisites\")\n      return (\n        <React.Fragment>\n          <br />\n          {this.makeButton(\n            key,\n            () =>\n              this.buildPreReqTree(this.formatYear(this.state.result.AcadYear)),\n            \"Prerequisite Tree\"\n          )}\n        </React.Fragment>\n      );\n  };\n\n  makeTable = (key, fn) => (\n    <table key={key}>\n      <tbody>\n        <tr>\n          <td>\n            {key}\n            {this.buildTreeButton(key)}\n          </td>\n          <td>{fn}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n\n  // Converts object to html table\n  convertObj = obj => {\n    if (typeof obj !== \"object\") {\n      return obj;\n    } else if (obj.constructor === Array) {\n      return obj.map(elem => {\n        return this.convertObj(elem);\n      });\n    } else {\n      return Object.keys(obj).map(key =>\n        this.makeTable(key, this.convertObj(obj[key]))\n      );\n    }\n  };\n\n  isValInArr = (val, arr) => arr.find(elem => elem === val) !== undefined;\n\n  initMod = (mod, mcs, grade) => ({ Name: mod, MCs: mcs, Grade: grade });\n  initSem = () => ({ Mods: [], Overload: false });\n  initYear = () => ({ \"Sem 1\": this.initSem(), \"Sem 2\": this.initSem() });\n\n  getYears = plan => Object.keys(plan);\n  getYear = (plan, year) => plan[year];\n  getSem = (plan, year, sem) => this.getYear(plan, year)[sem];\n  getOverload = (plan, year, sem) => this.getSem(plan, year, sem)[\"Overload\"];\n  getMods = (plan, year, sem) => this.getSem(plan, year, sem)[\"Mods\"];\n\n  getName = mod => mod[\"Name\"];\n  getMCs = mod => mod[\"MCs\"];\n  getGrade = mod => mod[\"Grade\"];\n\n  setMods = (plan, year, sem, mods) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem][\"Mods\"] = mods;\n    return temp;\n  };\n  setSem = (plan, year, sem, obj) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem] = obj;\n    return temp;\n  };\n  setYear = (plan, year, obj) => {\n    const temp = this.copyObj(plan);\n    temp[year] = obj;\n    return temp;\n  };\n  setOverload = (plan, year, sem) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem][\"Overload\"] = !temp[year][sem][\"Overload\"];\n    return temp;\n  };\n\n  addMod = (mod, sem, year) => {\n    if (this.state.result === undefined) {\n      this.updateError(\"No mod selected\");\n      return undefined;\n    }\n\n    // Returns an array of mods up to a specified academic year and semester\n    const getCurrMods = (sem = \"Sem 2\", maxYear = \"9999-9999\") => {\n      const getModsInYear = year => {\n        const plan = this.state.studentMods;\n        if (year < maxYear || (year === maxYear && sem === \"Sem 2\")) {\n          const first = this.getMods(plan, year, \"Sem 1\").map(this.getName);\n          const second = this.getMods(plan, year, \"Sem 2\").map(this.getName);\n          return first.concat(second);\n        } else if (year === maxYear && sem === \"Sem 1\") {\n          return this.getMods(plan, year, \"Sem 1\").map(this.getName);\n        } else {\n          return [];\n        }\n      };\n\n      const currmods = this.getYears(this.state.studentMods)\n        .map(getModsInYear)\n        .reduce((acc, arr) => acc.concat(arr), []);\n\n      return currmods;\n    };\n\n    // Parses boolTree objs to return a bool value(prerequisites, preclusions)\n    const parseBoolTree = (obj, currmods, isCheckPrereq = false) => {\n      if (typeof obj !== \"object\") {\n        return this.isValInArr(obj, currmods);\n      } else {\n        const or =\n          obj.or == null\n            ? true\n            : obj.or.reduce(\n                (acc, elem) => acc || parseBoolTree(elem, currmods),\n                false\n              );\n        const and =\n          obj.and == null\n            ? true\n            : obj.and.reduce(\n                (acc, elem) => acc && parseBoolTree(elem, currmods),\n                true\n              );\n        return or && and;\n      }\n    };\n\n    const checkPreclusion = currmods => {\n      if (this.state.result.ParsedPreclusion === undefined) return false;\n      else return parseBoolTree(this.state.result.ParsedPreclusion, currmods);\n    };\n\n    const checkPrereqs = currmods => {\n      if (this.state.result.ParsedPrerequisite === undefined) return true;\n      else\n        return parseBoolTree(\n          this.state.result.ParsedPrerequisite,\n          currmods,\n          true\n        );\n    };\n\n    const checkDuplicates = currmods => {\n      return this.isValInArr(mod, currmods);\n    };\n\n    const checkOverload = () => {\n      if (this.getYear(this.state.studentMods, year) === undefined) {\n        return 0;\n      } else {\n        const mild = 24;\n        const overload = 32;\n        const total = this.getMods(this.state.studentMods, year, sem)\n          .map(mod => parseInt(this.getMCs(mod)))\n          .reduce((acc, mcs) => acc + mcs, 0);\n        return total >= overload ? 2 : total >= mild ? 1 : 0;\n      }\n    };\n\n    if (checkDuplicates(getCurrMods())) {\n      this.updateError(\"No duplicates\");\n      return undefined;\n    }\n    if (checkPreclusion(getCurrMods())) {\n      this.updateError(\"Already precluded\");\n      return undefined;\n    }\n    if (!checkPrereqs(getCurrMods(sem, year))) {\n      this.updateError(\"Lack prerequisites\");\n      return undefined;\n    }\n    if (checkOverload() > 0) {\n      const value = checkOverload();\n      // Overflows mod\n      const isOverload = this.getOverload(this.state.studentMods, year, sem);\n      if (value === 2 && !isOverload) {\n        this.updateError(\"Overload!\");\n        // Increments year, sem\n        const yearInt = parseInt(year.slice(0, 4));\n        year = sem === \"Sem 1\" ? year : yearInt + 1 + \"-\" + (yearInt + 2);\n        sem = sem === \"Sem 1\" ? \"Sem 2\" : \"Sem 1\";\n        // Added mod overflows to the next sem\n        this.addMod(mod, sem, year);\n        return undefined;\n      } else if (value === 1) {\n        this.updateError(\n          \"Not recommended to take more than 24MCs per semester\"\n        );\n      }\n    }\n\n    var temp = this.copyObj(this.state.studentMods);\n    if (this.getYear(this.state.studentMods, year) === undefined) {\n      temp = this.setYear(temp, year, this.initYear());\n    }\n    var newMods = this.getMods(temp, year, sem).concat(\n      this.initMod(mod, this.state.result.ModuleCredit, 5.0)\n    );\n    temp = this.setMods(temp, year, sem, newMods);\n\n    // Updates studentMods, mcs\n    const newMcs = parseInt(this.state.result.ModuleCredit);\n    this.setState(state => ({\n      studentMods: temp,\n      mcs: state.mcs + newMcs\n    }));\n  };\n\n  // Parses boolTree objs to return a html tree\n  modMavenTree = obj => {\n    if (obj === undefined || obj === \"\") {\n      return;\n    }\n    if (typeof obj !== \"object\") {\n      return this.makeButton(obj, () => this.searchMods(obj), obj);\n    }\n    if (obj.constructor === Array) {\n      return obj.map(mod => this.modMavenTree(mod));\n    }\n    const isMod = key =>\n      !this.isValInArr(key, [\n        \"Prerequisite Tree\",\n        \"Either of\",\n        \"All of\",\n        \"Preclusions\",\n        \"Prerequisites\",\n        \"Needed by\",\n        \"Only\"\n      ]);\n    const replace = key => {\n      if (key === \"or\") return \"Any of\";\n      if (key === \"and\") return \"All of\";\n      if (isMod(key))\n        return this.makeButton(key, () => this.searchMods(key), key);\n      return key;\n    };\n    return Object.keys(obj).map(key =>\n      this.makeTable(replace(key), this.modMavenTree(obj[key]))\n    );\n  };\n\n  // Builds entire prereq tree and updates state\n  buildPreReqTree = year => {\n    if (this.state.result === undefined) return;\n    const mod = this.state.result.ModuleCode;\n\n    const buildTree = node => {\n      if (typeof node === \"object\") {\n        // If node is a boolTree\n        return Promise.all(\n          Object.keys(node).map(boolOp =>\n            buildTree(node[boolOp]).then(treeArray => {\n              // An array of preReqTrees\n              node[boolOp] = treeArray;\n            })\n          )\n        ).then(result => node);\n      } else if (node.constructor === Array) {\n        // If node is an array of mods\n        return Promise.all(node.map(buildTree));\n      } else {\n        // If node is a single mod\n        return this.getPrerequisites(year, node).then(boolTree => {\n          if (boolTree === undefined) {\n            // If mod has no prerequisites (Either mod does not exist or it is a foundational mod)\n            return node;\n          } else {\n            if (typeof boolTree === \"object\") {\n              return buildTree(boolTree).then(result => ({ [node]: result }));\n            } else {\n              // If there is only one prerequisite\n              return buildTree(boolTree).then(result => ({\n                [node]: { Only: result }\n              }));\n            }\n          }\n        });\n      }\n    };\n\n    buildTree(mod).then(result => {\n      const temp = { \"Prerequisite Tree\": result };\n      this.setState({\n        preReqTree: temp\n      });\n    });\n  };\n\n  getPrerequisites = (year, mod) => {\n    if (mod === undefined) {\n      return undefined;\n    }\n\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n    return axios\n      .get(url)\n      .then(response => response.data.ParsedPrerequisite)\n      .catch(error => {\n        console.log(error);\n        return undefined;\n      });\n  };\n\n  getPreclusions = (year, mod) => {\n    if (mod === undefined) {\n      return undefined;\n    }\n\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n    return axios\n      .get(url)\n      .then(response => response.data.ParsedPreclusion)\n      .catch(error => {\n        console.log(error);\n        return undefined;\n      });\n  };\n\n  searchMods = mod => {\n    this.setState({\n      mod: mod\n    });\n  };\n\n  updateOverload = (year, sem) => {\n    const temp = this.setOverload(this.state.studentMods, year, sem);\n    this.setState({\n      studentMods: temp\n    });\n  };\n\n  updateResult = result => {\n    this.setState(state => ({\n      result: result\n    }));\n  };\n\n  updateHistory = mod => {\n    this.setState(state => ({\n      history: [mod].concat(state.history).slice(0, 10)\n    }));\n  };\n\n  updateError = error => {\n    this.setState({ error: error });\n  };\n\n  handleKeyInput = event => {\n    // console.log(event.key);\n  };\n\n  render() {\n    console.log(this.state.studentMods);\n    const unwantedProps = [\n      \"LockedModules\",\n      \"ParsedPreclusion\",\n      \"ParsedPrerequisite\",\n      \"ModmavenTree\",\n      \"History\",\n      \"Timetable\",\n      \"LecturePeriods\",\n      \"TutorialPeriods\",\n      \"CorsBiddingStats\",\n      \"Workload\",\n      \"Prerequisite\",\n      \"Preclusion\"\n    ];\n    const mmTree =\n      this.state.result !== undefined\n        ? {\n            Preclusions: this.state.result.ParsedPreclusion,\n            Prerequisites: this.state.result.ParsedPrerequisite,\n            \"Needed by\": this.state.result.LockedModules\n          }\n        : \"\";\n    return (\n      <div className=\"App\" onKeyDown={this.handleKeyInput}>\n        <StudentPlan\n          copyObj={this.copyObj}\n          getMods={this.getMods}\n          getOverload={this.getOverload}\n          getYears={this.getYears}\n          makeButton={this.makeButton}\n          makeTable={this.makeTable}\n          mcs={this.state.mcs}\n          setAppState={this.setAppState}\n          setMods={this.setMods}\n          studentMods={this.state.studentMods}\n        />\n        <div>\n          <SearchBar\n            addMod={this.addMod}\n            updateResult={this.updateResult}\n            updateHistory={this.updateHistory}\n            updateError={this.updateError}\n            year={this.state.year}\n            mod={this.state.mod}\n            error={this.state.error}\n          />\n          {this.convertObj(\n            this.filterObjProps(unwantedProps, this.state.result)\n          )}\n          {this.modMavenTree(mmTree)}\n          {this.modMavenTree(this.state.preReqTree)}\n        </div>\n        <div>\n          History:\n          {this.state.history.map((result, index) => (\n            <p key={index} onClick={() => this.searchMods(result)}>\n              {result}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}