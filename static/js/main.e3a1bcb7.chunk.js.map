{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","sem","modules","info","yourmods","mcs","autocomplete","error","handleChange","bind","assertThisInitialized","handleSubmit","handleClick","event","target","type","setState","preclusions","Preclusion","match","mod","ModuleCode","filter","elem","length","indexOf","concat","year","parseInt","ModuleCredit","modcodes","map","results","RegExp","test","slice","_this2","url","get","then","response","data","console","log","catch","preventDefault","_this3","react_default","a","createElement","className","onSubmit","onChange","name","onClick","style","color","result","convert","obj","blacklist","constructor","Array","keys","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3a1bcb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios');\n\n// Check for prereqs, preclusion, mcs, basic requirements\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '',\n                  sem: '1',\n                  modules: [],\n                  info: {},\n                  yourmods: [],\n                  mcs: 0,\n                  autocomplete: [],\n                  error: \"\"\n                };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    if(event.target.type === \"radio\") {\n        this.setState({sem: event.target.value});\n    } else {\n        const preclusions = this.state.info.Preclusion.match(/[A-Z]{2,}[0-9]{4}[A-Z]*/g);\n        // Checks for terminating conditions\n        const mod = this.state.info.ModuleCode;\n        if(this.state.yourmods.filter(elem => elem.mod === mod).length > 0) {\n          this.setState({error: \"No Duplicates\"});\n          return undefined;\n        } else if(this.state.yourmods.filter(elem => preclusions.indexOf(elem.mod) >= 0).length > 0) {\n          this.setState({error: \"Already precluded\"});\n          return undefined;\n        }\n\n        this.setState((state, props) => ({\n        yourmods: state.yourmods.concat([{\n          year: 2018,\n          sem: state.sem,\n          mod: mod\n        }]),\n        mcs: state.mcs + parseInt(state.info.ModuleCredit)\n      }));\n    }\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results = (value === \"\") ? [] : modcodes.filter(mod => RegExp(value + '+').test(mod)).slice(0,10);\n    this.setState({value: value,\n                  autocomplete: results\n                  });\n  }\n\n  handleSubmit(event) {\n    const url = `https://api.nusmods.com/2018-2019/${this.state.sem}/modules/${this.state.value}.json`;\n    axios.get(url)\n    .then((response) => {\n      this.setState({\n        info: response.data\n      });\n      console.log(url);\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    event.preventDefault();\n  }\n\n  componentDidMount() {\n    axios.get(\"https://api.nusmods.com/2018-2019/moduleList.json\")\n    .then((response) => {\n      this.setState({\n        modules: response.data\n      })\n    })\n  }\n  \n  render() {\n    // Converts from object literal to html syntax\n    function convert(obj) {\n      const blacklist = [\"Timetable\", \"LecturePeriods\", \"TutorialPeriods\", \"CorsBiddingStats\"];\n      if(typeof obj !== \"object\") {\n        return obj;\n      } else if(obj.constructor === Array) {\n        return obj.map(elem => <tr><td>{convert(elem)}</td></tr>);\n      } else {\n        const props = Object.keys(obj).filter(key => blacklist.indexOf(key) === -1);\n        return props.map(key => <tr><td>{key}</td> <td>{convert(obj[key])}</td> </tr>);\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        Your Mods: <tr><th>Year</th><th>Semester</th><th>Module</th></tr>\n        {this.state.yourmods.map(mod => <tr><td>{mod.year}</td><td>{mod.sem}</td><td>{mod.mod}</td></tr>)} <br/>\n        Your MCs: {this.state.mcs}<br/>\n        <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n          Module Code:\n          <input type=\"text\" name=\"name\" />\n          <input type=\"submit\" value=\"Submit\" />\n          <button onClick={this.handleClick}>Add Module</button> <br/>\n          <span style={{color: \"red\"}}>{this.state.error}</span><br/>\n          Semester: \n          <input onClick={this.handleClick} type=\"radio\" name=\"Semester\" value=\"1\"/> 1\n          <input onClick={this.handleClick} type=\"radio\" name=\"Semester\" value=\"2\"/> 2 <br/>\n          \n          {this.state.autocomplete.map(result => <p>{result}</p>)}\n        </form>\n        {convert(this.state.info)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}