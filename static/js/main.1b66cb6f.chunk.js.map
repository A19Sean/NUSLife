{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","sem","modules","info","yourmods","mcs","autocomplete","error","handleChange","bind","assertThisInitialized","handleSubmit","handleClick","event","target","type","setState","concat","year","mod","ModuleCode","parseInt","ModuleCredit","console","log","modcodes","map","results","filter","RegExp","test","slice","_this2","url","get","then","response","data","catch","preventDefault","_this3","react_default","a","createElement","className","onSubmit","onChange","name","onClick","result","convert","obj","blacklist","constructor","Array","elem","keys","key","indexOf","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b66cb6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios');\n\n// Check for prereqs, preclusion, mcs, basic requirements\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '',\n                  sem: '1',\n                  modules: [],\n                  info: {},\n                  yourmods: [],\n                  mcs: 180,\n                  autocomplete: [],\n                  error: \"\"\n                };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    if(event.target.type === \"radio\") {\n        this.setState({sem: event.target.value});\n    } else {\n        this.setState((state, props) => ({\n        yourmods: state.yourmods.concat([{\n          year: 2018,\n          sem: state.sem,\n          mod: state.info.ModuleCode\n        }]),\n        mcs: state.mcs - parseInt(state.info.ModuleCredit)\n      }));\n      console.log(this.state.yourmods);\n    }\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results = (value === \"\") ? [] : modcodes.filter(mod => RegExp(value + '+').test(mod)).slice(0,10);\n    this.setState({value: value,\n                  autocomplete: results\n                  });\n  }\n\n  handleSubmit(event) {\n    const url = `https://api.nusmods.com/2018-2019/${this.state.sem}/modules/${this.state.value}.json`;\n    axios.get(url)\n    .then((response) => {\n      this.setState({\n        info: response.data\n      });\n      console.log(url);\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    event.preventDefault();\n  }\n\n  componentDidMount() {\n    axios.get(\"https://api.nusmods.com/2018-2019/moduleList.json\")\n    .then((response) => {\n      this.setState({\n        modules: response.data\n      })\n    })\n  }\n  \n  render() {\n    // Converts from object literal to html syntax\n    function convert(obj) {\n      const blacklist = [\"Timetable\", \"LecturePeriods\", \"TutorialPeriods\", \"CorsBiddingStats\"];\n      if(typeof obj !== \"object\") {\n        return obj;\n      } else if(obj.constructor === Array) {\n        return obj.map(elem => <tr><td>{convert(elem)}</td></tr>);\n      } else {\n        const props = Object.keys(obj).filter(key => blacklist.indexOf(key) === -1);\n        return props.map(key => <tr><td>{key}</td> <td>{convert(obj[key])}</td> </tr>);\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        Your Mods: <tr><th>Year</th><th>Semester</th><th>Module</th></tr>\n        {this.state.yourmods.map(mod => <tr><td>{mod.year}</td><td>{mod.sem}</td><td>{mod.mod}</td></tr>)} <br/>\n        Your MCs: {this.state.mcs}<br/>\n        <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n          Module Code:\n          <input type=\"text\" name=\"name\" />\n          <input type=\"submit\" value=\"Submit\" />\n          <button onClick={this.handleClick}>Add Module</button> <br/>\n          Semester: \n          <input onClick={this.handleClick} type=\"radio\" name=\"Semester\" value=\"1\"/> 1\n          <input onClick={this.handleClick} type=\"radio\" name=\"Semester\" value=\"2\"/> 2 <br/>\n          \n          {this.state.autocomplete.map(result => <p>{result}</p>)}\n        </form>\n        {convert(this.state.info)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}