{"version":3,"sources":["SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchMods","year","mod","url","concat","console","log","get","then","response","setState","state","value","autocomplete","selectedMod","data","ModuleCode","props","updateError","updateResult","updateHistory","catch","error","handleSubmit","event","preventDefault","handleChange","target","toUpperCase","modcodes","modules","map","results","filter","RegExp","test","slice","handleClick","sem","addMod","selectSem","selectYear","generateYears","n","parseInt","Date","toISOString","Array","from","val","i","renderYears","react_default","a","createElement","Fragment","key","componentDidMount","componentDidUpdate","prevProps","_this2","onSubmit","type","name","onChange","placeholder","id","onClick","style","color","module","Component","App","copyObj","obj","JSON","parse","stringify","filterObjProps","blacklist","temp","prop","makeButton","click","text","formatYear","replace","buildTreeButton","buildPreReqTree","result","AcadYear","makeTable","fn","convertObj","constructor","elem","keys","makePlan","makeSem","mods","getMods","getName","delMod","getMCs","grade","e","updateGrade","makeMod","overload","getOverload","yourmods","updateOverload","checked","getYears","isValInArr","arr","undefined","find","initMod","mcs","Name","MCs","Grade","initSem","Mods","Overload","initYear","Sem 1","Sem 2","plan","getYear","getSem","getGrade","setGrade","modName","setMods","setSem","setYear","setOverload","currmods","getCurrMods","arguments","length","maxYear","first","second","reduce","acc","parseBoolTree","or","and","checkOverload","total","ParsedPreclusion","checkPreclusion","ParsedPrerequisite","checkPrereqs","isOverload","yearInt","newMods","ModuleCredit","newMcs","modMavenTree","isMod","buildTree","node","Promise","all","boolOp","treeArray","getPrerequisites","boolTree","defineProperty","Only","Prerequisite Tree","preReqTree","getPreclusions","history","handleKeyInput","mmTree","Preclusions","Prerequisites","Needed by","LockedModules","className","onKeyDown","SearchBar_SearchBar","index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.615bc335.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst axios = require(\"axios\");\n\nexport default class SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      sem: \"1\",\n      year: \"2018-2019\",\n      modules: [], // stores all modules\n      autocomplete: [],\n      selectedMod: \"\" // stored as module code\n    };\n  }\n\n  searchMods = (year, mod) => {\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n    console.log(url);\n    axios\n      .get(url)\n      .then(response => {\n        this.setState(state => ({\n          value: mod,\n          year: year,\n          autocomplete: [],\n          selectedMod: response.data.ModuleCode\n        }));\n        this.props.updateError(\"\"); // Clears error field\n        this.props.updateResult(response.data);\n        this.props.updateHistory(mod);\n      })\n      .catch(error => {\n        console.log(error);\n        this.props.updateError(\"Could not find module\");\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.searchMods(this.state.year, this.state.value);\n  };\n\n  handleChange = event => {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results =\n      value === \"\"\n        ? []\n        : modcodes.filter(mod => RegExp(value + \"+\").test(mod)).slice(0, 10);\n    this.setState({\n      value: value,\n      autocomplete: results\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.selectedMod == null) {\n      this.props.updateError(\"No mod selected\");\n      return undefined;\n    }\n    const year = this.state.year;\n    const sem = \"Sem \" + this.state.sem;\n    const mod = this.state.selectedMod;\n\n    this.props.addMod(mod, sem, year);\n  };\n\n  selectSem = event => {\n    this.setState({ sem: event.target.value });\n  };\n\n  selectYear = event => {\n    this.setState({ year: event.target.value });\n    axios\n      .get(`https://api.nusmods.com/${event.target.value}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  generateYears = n => {\n    // Gets current year - 4\n    const year = parseInt(new Date().toISOString().slice(0, 4)) - 4;\n    return Array.from(new Array(n), (val, i) => year + i);\n  };\n\n  renderYears = () => (\n    <React.Fragment>\n      {this.generateYears(10).map(year => (\n        <option key={year}>{year + \"-\" + (year + 1)}</option>\n      ))}\n    </React.Fragment>\n  );\n\n  componentDidMount = () => {\n    axios\n      .get(`https://api.nusmods.com/${this.state.year}/moduleList.json`)\n      .then(response => {\n        this.setState({\n          modules: response.data\n        });\n      });\n  };\n\n  componentDidUpdate = prevProps => {\n    if (prevProps.mod !== this.props.mod) {\n      this.searchMods(this.state.year, this.props.mod);\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        Module Code:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          placeholder={\"Search modules\"}\n        />\n        <input type=\"submit\" value=\"Search\" />\n        <button type=\"button\" id=\"add-mod\" onClick={this.handleClick}>\n          Add Module\n        </button>\n        <br />\n        Semester:\n        <select id=\"select-sem\" onClick={this.selectSem}>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n        </select>\n        Year:\n        <select id=\"select-year\" onClick={this.selectYear}>\n          {this.renderYears()}\n        </select>\n        <br />\n        <br />\n        <span style={{ color: \"red\" }}>{this.props.error}</span>\n        {this.state.autocomplete.map(module => (\n          <p\n            key={module}\n            onClick={() => this.searchMods(this.state.year, module)}\n          >\n            {module}\n          </p>\n        ))}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  addMod: PropTypes.func.isRequired,\n  updateResult: PropTypes.func.isRequired,\n  updateHistory: PropTypes.func.isRequired,\n  updateError: PropTypes.func.isRequired,\n  year: PropTypes.string,\n  mod: PropTypes.string,\n  error: PropTypes.string\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchBar.js\";\nimport SearchBar from \"./SearchBar.js\";\nconst axios = require(\"axios\");\n\n// DONE\n// tags and sharing, preclusions as prereqs\n// Add grade calculation\n// Code refactoring\n// Improve overload\n\n// TODO\n// Check for basic requirements, mod mapping\n// Other programmes besides mods eg SEP, UTCP\n// Some bugs in the ParsedPrerequisite Tree: Should be \"or\" but instead it's \"and\" eg: MA1521, MA1102R\n// Bug: Mods that are not explicitly stated as prereqs but are preclusions do not function as prereqs\n// Keyboard shortcuts\n// Tags and sharing\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mod: \"\",\n      result: undefined, // state of search result\n      preReqTree: {}, // contains preReqTree obj\n      history: [], // contains history of searched modules\n      yourmods: {}, // contains scheduled modules\n      mcs: 0,\n      error: \"\"\n    };\n  }\n\n  copyObj = obj => JSON.parse(JSON.stringify(obj));\n\n  // Gets rid of unwanted object properties\n  filterObjProps = (blacklist, obj) => {\n    if (typeof obj === \"object\") {\n      const temp = this.copyObj(obj);\n      blacklist.map(prop => delete temp[prop]);\n      return temp;\n    } else {\n      return obj;\n    }\n  };\n\n  makeButton = (key, click, text) => (\n    <button key={key} onClick={click}>\n      {text}\n    </button>\n  );\n\n  formatYear = year => {\n    return year.replace(\"/\", \"-\");\n  };\n\n  buildTreeButton = key => {\n    if (key === \"Prerequisites\")\n      return (\n        <React.Fragment>\n          <br />\n          {this.makeButton(\n            key,\n            () =>\n              this.buildPreReqTree(this.formatYear(this.state.result.AcadYear)),\n            \"Prerequisite Tree\"\n          )}\n        </React.Fragment>\n      );\n  };\n\n  makeTable = (key, fn) => (\n    <table key={key}>\n      <tbody>\n        <tr>\n          <td>\n            {key}\n            {this.buildTreeButton(key)}\n          </td>\n          <td>{fn}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n\n  // Converts object to html table\n  convertObj = obj => {\n    if (typeof obj !== \"object\") {\n      return obj;\n    } else if (obj.constructor === Array) {\n      return obj.map(elem => {\n        return this.convertObj(elem);\n      });\n    } else {\n      return Object.keys(obj).map(key =>\n        this.makeTable(key, this.convertObj(obj[key]))\n      );\n    }\n  };\n\n  // Converts yourmods obj into html table\n  makePlan = (obj, props) => {\n    const makeMod = (year, sem, mod) => (\n      <React.Fragment>\n        {this.makeButton(\n          this.getName(mod),\n          () => this.delMod(this.getName(mod), this.getMCs(mod), year, sem),\n          this.getName(mod)\n        )}\n        {\n          <select>\n            {[5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0].map(\n              grade => (\n                <option\n                  key={grade}\n                  onClick={e =>\n                    this.updateGrade(e, year, sem, this.getName(mod))\n                  }\n                >\n                  {grade}\n                </option>\n              )\n            )}\n          </select>\n        }\n      </React.Fragment>\n    );\n\n    const makeSem = (year, sem) => {\n      const mods = this.getMods(obj, year, sem).map(mod =>\n        makeMod(year, sem, mod)\n      );\n      const overload = (\n        <React.Fragment>\n          {this.getOverload(this.state.yourmods, year, sem) ? (\n            <input\n              type=\"checkbox\"\n              onClick={() => this.updateOverload(year, sem)}\n              checked\n            />\n          ) : (\n            <input\n              type=\"checkbox\"\n              onClick={() => this.updateOverload(year, sem)}\n            />\n          )}\n        </React.Fragment>\n      );\n      const result = (\n        <React.Fragment>\n          {this.makeTable(\"Mods\", mods)}\n          {this.makeTable(\"Overload\", overload)}\n        </React.Fragment>\n      );\n      return this.makeTable(sem, result);\n    };\n\n    const makeYear = year => {\n      const result = (\n        <React.Fragment>\n          {makeSem(year, \"Sem 1\")}\n          {makeSem(year, \"Sem 2\")}\n        </React.Fragment>\n      );\n      return this.makeTable(year, result);\n    };\n\n    return this.getYears(this.state.yourmods).map(makeYear);\n  };\n\n  isValInArr = (val, arr) => arr.find(elem => elem === val) !== undefined;\n\n  initMod = (mod, mcs, grade) => ({ Name: mod, MCs: mcs, Grade: grade });\n  initSem = () => ({ Mods: [], Overload: false });\n  initYear = () => ({ \"Sem 1\": this.initSem(), \"Sem 2\": this.initSem() });\n\n  getYears = plan => Object.keys(plan);\n  getYear = (plan, year) => plan[year];\n  getSem = (plan, year, sem) => this.getYear(plan, year)[sem];\n  getOverload = (plan, year, sem) => this.getSem(plan, year, sem)[\"Overload\"];\n  getMods = (plan, year, sem) => this.getSem(plan, year, sem)[\"Mods\"];\n\n  getName = mod => mod[\"Name\"];\n  getMCs = mod => mod[\"MCs\"];\n  getGrade = mod => mod[\"Grade\"];\n\n  setGrade = (plan, year, sem, modName, grade) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem][\"Mods\"].find(mod => this.getName(mod) === modName)[\n      \"Grade\"\n    ] = grade;\n    return temp;\n  };\n  setMods = (plan, year, sem, mods) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem][\"Mods\"] = mods;\n    return temp;\n  };\n  setSem = (plan, year, sem, obj) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem] = obj;\n    return temp;\n  };\n  setYear = (plan, year, obj) => {\n    const temp = this.copyObj(plan);\n    temp[year] = obj;\n    return temp;\n  };\n  setOverload = (plan, year, sem) => {\n    const temp = this.copyObj(plan);\n    temp[year][sem][\"Overload\"] = !temp[year][sem][\"Overload\"];\n    return temp;\n  };\n\n  addMod = (mod, sem, year) => {\n    if (this.state.result === undefined) {\n      this.updateError(\"No mod selected\");\n      return undefined;\n    }\n\n    // Returns an array of mods up to a specified academic year and semester\n    const getCurrMods = (sem = \"Sem 2\", maxYear = \"9999-9999\") => {\n      const getModsInYear = year => {\n        const plan = this.state.yourmods;\n        if (year < maxYear || (year === maxYear && sem === \"Sem 2\")) {\n          const first = this.getMods(plan, year, \"Sem 1\").map(this.getName);\n          const second = this.getMods(plan, year, \"Sem 2\").map(this.getName);\n          return first.concat(second);\n        } else if (year === maxYear && sem === \"Sem 1\") {\n          return this.getMods(plan, year, \"Sem 1\").map(this.getName);\n        } else {\n          return [];\n        }\n      };\n\n      const currmods = this.getYears(this.state.yourmods)\n        .map(getModsInYear)\n        .reduce((acc, arr) => acc.concat(arr), []);\n\n      return currmods;\n    };\n\n    // Parses boolTree objs to return a bool value(prerequisites, preclusions)\n    const parseBoolTree = (obj, currmods, isCheckPrereq=false) => {\n      if (typeof obj !== \"object\") {\n        return this.isValInArr(obj, currmods);\n      } else {\n        const or =\n          obj.or == null\n            ? true\n            : obj.or.reduce(\n                (acc, elem) => acc || parseBoolTree(elem, currmods),\n                false\n              );\n        const and =\n          obj.and == null\n            ? true\n            : obj.and.reduce(\n                (acc, elem) => acc && parseBoolTree(elem, currmods),\n                true\n              );\n        return or && and;\n      }\n    };\n\n    const checkPreclusion = currmods => {\n      if (this.state.result.ParsedPreclusion === undefined) return false;\n      else return parseBoolTree(this.state.result.ParsedPreclusion, currmods);\n    };\n\n    const checkPrereqs = currmods => {\n      if (this.state.result.ParsedPrerequisite === undefined) return true;\n      else return parseBoolTree(this.state.result.ParsedPrerequisite, currmods, true);\n    };\n\n    const checkDuplicates = currmods => {\n      return this.isValInArr(mod, currmods);\n    };\n\n    const checkOverload = () => {\n      if (this.getYear(this.state.yourmods, year) === undefined) {\n        return 0;\n      } else {\n        const mild = 24;\n        const overload = 32;\n        const total = this.getMods(this.state.yourmods, year, sem)\n          .map(mod => parseInt(this.getMCs(mod)))\n          .reduce((acc, mcs) => acc + mcs, 0);\n        return total >= overload ? 2 : total >= mild ? 1 : 0;\n      }\n    };\n\n    if (checkDuplicates(getCurrMods())) {\n      this.updateError(\"No duplicates\");\n      return undefined;\n    }\n    if (checkPreclusion(getCurrMods())) {\n      this.updateError(\"Already precluded\");\n      return undefined;\n    } \n    if (!checkPrereqs(getCurrMods(sem, year))) {\n      this.updateError(\"Lack prerequisites\");\n      return undefined;\n    } \n    if (checkOverload() > 0) {\n      const value = checkOverload();\n      // Overflows mod\n      const isOverload = this.getOverload(this.state.yourmods, year, sem);\n      if (value === 2 && !isOverload) {\n        this.updateError(\"Overload!\");\n        // Increments year, sem\n        const yearInt = parseInt(year.slice(0, 4));\n        year = sem === \"Sem 1\" ? year : yearInt + 1 + \"-\" + (yearInt + 2);\n        sem = sem === \"Sem 1\" ? \"Sem 2\" : \"Sem 1\";\n        // Added mod overflows to the next sem\n        this.addMod(mod, sem, year);\n        return undefined;\n      } else if (value === 1) {\n        this.updateError(\n          \"Not recommended to take more than 24MCs per semester\"\n        );\n      }\n    }\n\n    var temp = this.copyObj(this.state.yourmods);\n    if (this.getYear(this.state.yourmods, year) === undefined) {\n      temp = this.setYear(temp, year, this.initYear());\n    }\n    var newMods = this.getMods(temp, year, sem).concat(\n      this.initMod(mod, this.state.result.ModuleCredit, 5.0)\n    );\n    temp = this.setMods(temp, year, sem, newMods);\n\n    // Updates yourmods, mcs\n    const newMcs = parseInt(this.state.result.ModuleCredit);\n    this.setState(state => ({\n      yourmods: temp,\n      mcs: state.mcs + newMcs\n    }));\n  };\n\n  delMod = (mod, mcs, year, sem) => {\n    var temp = this.copyObj(this.state.yourmods);\n    const newMods = this.getMods(temp, year, sem).filter(\n      elem => this.getName(elem) !== mod\n    );\n    temp = this.setMods(temp, year, sem, newMods);\n    this.setState((state, props) => ({\n      yourmods: temp,\n      mcs: state.mcs - mcs\n    }));\n  };\n\n  // Parses boolTree objs to return a html tree\n  modMavenTree = obj => {\n    if (obj === undefined || obj === \"\") {\n      return;\n    }\n    if (typeof obj !== \"object\") {\n      return this.makeButton(obj, () => this.searchMods(obj), obj);\n    }\n    if (obj.constructor === Array) {\n      return obj.map(mod => this.modMavenTree(mod));\n    }\n    const isMod = key =>\n      !this.isValInArr(key, [\n        \"Prerequisite Tree\",\n        \"Either of\",\n        \"All of\",\n        \"Preclusions\",\n        \"Prerequisites\",\n        \"Needed by\",\n        \"Only\"\n      ]);\n    const replace = key => {\n      if (key === \"or\") return \"Any of\";\n      if (key === \"and\") return \"All of\";\n      if (isMod(key))\n        return this.makeButton(key, () => this.searchMods(key), key);\n      return key;\n    };\n    return Object.keys(obj).map(key =>\n      this.makeTable(replace(key), this.modMavenTree(obj[key]))\n    );\n  };\n\n  // Builds entire prereq tree and updates state\n  buildPreReqTree = year => {\n    if (this.state.result === undefined) return;\n    const mod = this.state.result.ModuleCode;\n\n    const buildTree = node => {\n      if (typeof node === \"object\") {\n        // If node is a boolTree\n        return Promise.all(\n          Object.keys(node).map(boolOp =>\n            buildTree(node[boolOp]).then(treeArray => {\n              // An array of preReqTrees\n              node[boolOp] = treeArray;\n            })\n          )\n        ).then(result => node);\n      } else if (node.constructor === Array) {\n        // If node is an array of mods\n        return Promise.all(node.map(buildTree));\n      } else {\n        // If node is a single mod\n        return this.getPrerequisites(year, node).then(boolTree => {\n          if (boolTree === undefined) {\n            // If mod has no prerequisites (Either mod does not exist or it is a foundational mod)\n            return node;\n          } else {\n            if (typeof boolTree === \"object\") {\n              return buildTree(boolTree).then(result => ({ [node]: result }));\n            } else {\n              // If there is only one prerequisite\n              return buildTree(boolTree).then(result => ({\n                [node]: { Only: result }\n              }));\n            }\n          }\n        });\n      }\n    };\n\n    buildTree(mod).then(result => {\n      const temp = { \"Prerequisite Tree\": result };\n      this.setState({\n        preReqTree: temp\n      });\n    });\n  };\n\n  getPrerequisites = (year, mod) => {\n    if (mod === undefined) {\n      return undefined;\n    }\n\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n    return axios\n      .get(url)\n      .then(response => response.data.ParsedPrerequisite)\n      .catch(error => {\n        console.log(error);\n        return undefined;\n      });\n  };\n\n  getPreclusions = (year, mod) => {\n    if (mod === undefined) {\n      return undefined;\n    }\n\n    const url = `https://api.nusmods.com/${year}/modules/${mod}.json`;\n\n    return axios\n      .get(url)\n      .then(response => response.data.ParsedPreclusion)\n      .catch(error => {\n        console.log(error);\n        return undefined;\n      });\n  };\n\n  searchMods = mod => {\n    this.setState({\n      mod: mod\n    });\n  };\n\n  updateGrade = (event, year, sem, modName) => {\n    const temp = this.setGrade(\n      this.state.yourmods,\n      year,\n      sem,\n      modName,\n      event.target.value\n    );\n    this.setState({\n      yourmods: temp\n    });\n  };\n\n  updateOverload = (year, sem) => {\n    const temp = this.setOverload(this.state.yourmods, year, sem);\n    this.setState({\n      yourmods: temp\n    });\n  };\n\n  updateResult = result => {\n    this.setState(state => ({\n      result: result\n    }));\n  };\n\n  updateHistory = mod => {\n    this.setState(state => ({\n      history: [mod].concat(state.history).slice(0, 10)\n    }));\n  };\n\n  updateError = error => {\n    this.setState({ error: error });\n  };\n\n  handleKeyInput = event => {\n    console.log(event.key);\n  };\n\n  render() {\n    console.log(this.state.yourmods);\n    const unwantedProps = [\n      \"LockedModules\",\n      \"ParsedPreclusion\",\n      \"ParsedPrerequisite\",\n      \"ModmavenTree\",\n      \"History\",\n      \"Timetable\",\n      \"LecturePeriods\",\n      \"TutorialPeriods\",\n      \"CorsBiddingStats\",\n      \"Workload\",\n      \"Prerequisite\",\n      \"Preclusion\"\n    ];\n    const mmTree =\n      this.state.result !== undefined\n        ? {\n            Preclusions: this.state.result.ParsedPreclusion,\n            Prerequisites: this.state.result.ParsedPrerequisite,\n            \"Needed by\": this.state.result.LockedModules\n          }\n        : \"\";\n    return (\n      <div className=\"App\" onKeyDown={this.handleKeyInput}>\n        <div>\n          Your Mods:\n          {this.makePlan(this.state.yourmods, [])} <br />\n          Your MCs: {this.state.mcs}\n          <br />\n        </div>\n        <div>\n          <SearchBar\n            addMod={this.addMod}\n            updateResult={this.updateResult}\n            updateHistory={this.updateHistory}\n            updateError={this.updateError}\n            year={this.state.year}\n            mod={this.state.mod}\n            error={this.state.error}\n          />\n          {this.convertObj(\n            this.filterObjProps(unwantedProps, this.state.result)\n          )}\n          {this.modMavenTree(mmTree)}\n          {this.modMavenTree(this.state.preReqTree)}\n        </div>\n        <div>\n          History:\n          {this.state.history.map((result, index) => (\n            <p key={index} onClick={() => this.searchMods(result)}>\n              {result}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}