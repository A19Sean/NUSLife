{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","sem","year","modules","info","undefined","yourmods","mcs","autocomplete","error","handleChange","bind","assertThisInitialized","handleSubmit","handleClick","blacklist","obj","map","prop","_this2","constructor","Array","elem","react_default","a","createElement","convert","keys","key","n","temp","i","currmods","concat","mod","filter","currmod","length","_this3","indexOf","or","reduce","acc","parse","and","preclusions","ParsedPreclusion","prereqs","ParsedPrerequisite","event","target","type","setState","ModuleCode","getCurrMods","checkDuplicates","checkPreclusion","checkPrereqs","Sem 1","Sem 2","parseInt","ModuleCredit","tagName","parent","parentNode","id","toUpperCase","modcodes","results","RegExp","test","slice","name","_this4","url","console","log","get","then","response","data","catch","preventDefault","_this5","className","onSubmit","onChange","onClick","range","style","color","result","filterObjProps","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d3de271.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios');\n\n// Check for prereqs, preclusion, mcs, basic requirements\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '',\n                  sem: '1',\n                  year: '2018-2019',\n                  modules: [],\n                  info: undefined,\n                  yourmods: {},\n                  mcs: 0,\n                  autocomplete: [],\n                  error: \"\"\n                };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  filterObjProps(blacklist, obj) {    \n    // Gets rid of unwanted object properties\n    if(typeof obj === \"object\") {\n      blacklist.map(prop => delete obj[prop]);\n      return obj;\n    } else{\n      return obj;\n    }\n  }\n  \n  // Converts from object literal to html syntax\n  convert(obj) {\n    if(typeof obj !== \"object\") {\n      return obj;\n    } else if(obj.constructor === Array) {\n      return obj.map(elem => <tr><td>{this.convert(elem)}</td></tr>);\n    } else {\n      return Object.keys(obj).map(key => <tr><td>{key}</td> <td>{this.convert(obj[key])}</td> </tr>);\n    }\n  }\n\n  range(n) {\n    const temp = [];\n    for(var i = 0; i < n; i++) {\n      temp[i] = i;\n    }\n    return temp;\n  }\n\n  getCurrMods() {\n    var currmods = [];\n      for(var year in this.state.yourmods) {\n        currmods = currmods.concat(this.state.yourmods[year][\"Sem 1\"].concat(this.state.yourmods[year][\"Sem 2\"]));\n      }\n    return currmods;\n  }\n\n  checkDuplicates(mod, currmods) {\n    return currmods.filter(currmod => currmod === mod).length > 0;\n  }\n  \n  parse(obj, currmods) {\n    if(typeof obj !== \"object\") {\n      return currmods.indexOf(obj) >= 0;\n    } else {\n      const or = obj.or == null ? true : obj.or.reduce((acc, elem) => acc || this.parse(elem, currmods), false);\n      const and = obj.and == null ? true : obj.and.reduce((acc, elem) => acc && this.parse(elem, currmods), true);\n      return or && and;\n    }\n  }\n\n  checkPreclusion(currmods) {\n    const preclusions = this.state.info.ParsedPreclusion;\n    return preclusions == null ? false : this.parse(preclusions, currmods);\n  }\n  \n  checkPrereqs(currmods) {\n    const prereqs = this.state.info.ParsedPrerequisite;\n    return prereqs == null ? true : this.parse(prereqs, currmods);\n  }\n\n  handleClick(event) {\n    if(event.target.type === \"submit\") {\n      // If submit button is clicked\n      if(this.state.info == null) {\n        this.setState({error: \"No mod selected\"});\n        return undefined;\n      }\n\n      const temp = this.state.yourmods;\n      const mod = this.state.info.ModuleCode;\n      const year = this.state.year;\n      const sem = \"Sem \" + this.state.sem;\n      const currmods = this.getCurrMods();\n\n      // Checks for terminating conditions\n      if(this.checkDuplicates(mod, currmods)) {\n        this.setState({error: \"No duplicates\"});\n        return undefined;\n      } else if(this.checkPreclusion(currmods)) {\n        this.setState({error: \"Already precluded\"});\n        return undefined;\n      } else if(!this.checkPrereqs(currmods)) {\n        this.setState({error: \"Lack prerequisites\"});\n        return undefined;\n      }\n      \n      // Adds mod to yourmods\n      if(temp[year] === undefined) {\n        temp[year] = {\"Sem 1\": [], \"Sem 2\": []};\n      }\n      temp[year][sem] = temp[year][sem].concat([mod]);\n      \n      // Updates yourmods, mcs, and clears error\n      this.setState((state, props) => ({\n        yourmods: temp,\n        mcs: state.mcs + parseInt(state.info.ModuleCredit),\n        error: \"\"\n      })); \n    } else if(event.target.tagName === \"OPTION\") {\n      // If option is clicked, identify the element id\n      const parent = event.target.parentNode.id\n      if(parent === \"select-sem\") {\n        this.setState({sem: event.target.value});\n      } else if(parent === \"select-year\") {\n        this.setState({year: event.target.value});\n      }\n    }\n  }\n\n  handleChange(event) {\n    const value = event.target.value.toUpperCase();\n    const modcodes = this.state.modules.map(mod => mod[\"ModuleCode\"]);\n    const results = (value === \"\") ? [] : modcodes.filter(mod => RegExp(value + '+').test(mod)).slice(0,10);\n    if(event.target.name === \"name\") {\n      this.setState({\n        value: value,\n        autocomplete: results\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    const url = `https://api.nusmods.com/${this.state.year}/modules/${this.state.value}.json`;\n    console.log(url);\n    axios.get(url)\n    .then((response) => {\n      this.setState({\n        info: response.data\n      });\n    })\n    .catch((error) => {\n      // handle error\n      console.log(error);\n      this.setState({\n        info: {},\n        error: \"Could not find module\"\n      });\n    })\n    event.preventDefault();\n  }\n\n  componentDidMount() {\n    axios.get(\"https://api.nusmods.com/2018-2019/moduleList.json\")\n    .then((response) => {\n      this.setState({\n        modules: response.data\n      })\n    })\n  }\n\n  render() {\n    \n    \n    return (\n      <div className=\"App\">\n        <div>\n          Your Mods: \n          {this.convert(this.state.yourmods)} <br/>\n          Your MCs: {this.state.mcs}<br/>\n        </div>\n        <div>\n          <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n            Module Code:\n            <input type=\"text\" name=\"name\" />\n            <input type=\"submit\" value=\"Search\" />\n            <button id=\"add-mod\" onClick={this.handleClick}>Add Module</button> <br/>\n            Semester: \n            <select id=\"select-sem\" onClick={this.handleClick}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n            Year:\n            <select id=\"select-year\" onClick={this.handleClick}>\n              {this.range(19).map(i => (<option value={(i + 2000) +  \"-\" + (i + 2001)}>{(i + 2000) +  \"-\" + (i + 2001)}</option>))}\n            </select>\n            <br/>\n            <span style={{color: \"red\"}}>{this.state.error}</span>\n            {this.state.autocomplete.map(result => <p>{result}</p>)}\n          </form>\n          {this.convert(this.filterObjProps([\"ModmavenTree\", \"History\", \"Timetable\", \"LecturePeriods\", \"TutorialPeriods\", \"CorsBiddingStats\", \"Workload\"],\n                                           this.state.info))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}